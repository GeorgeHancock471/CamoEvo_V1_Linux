/*____________________________________________________________________

	Title: CamoEvo_Game
	Authors:  George Hancock 
	Date: 27/01/2021
	
.................................................................................................................

Description:
''''''''''''''''''''''''''''''''
Runs the Camouflage Evolution Game part of CamoEvo and has a UI for previewing data output by CamoEvo.

*/


setBatchMode(true);



/*
..........................................................................................................................................

															Setup

..........................................................................................................................................

*/



//----------------------------------------------------------------------------------------------------------------
// 0) General
//----------------------------------------------------------------------------------------------------------------



//================================================================
//Functions
//================================================================

// TestPoint
//---------------------------------------------------


function TestPoint(Title) {
Dialog.createNonBlocking("TestPoint");
Dialog.createNonBlocking("Did " + Title + " work?");
Dialog.show();

}


// Index
//---------------------------------------------------
// Allows you to obtain the index of a Value within an Array.

  function index(a, value) {
      for (i=0; i<a.length; i++)
          if (a[i]==value) return i;
      return -1;
  }



//================================================================
//Population Location
//================================================================


Dialog.create("Choose Directory");
		Dialog.addMessage("________________Choose Folder___________________");
		Dialog.addMessage("Select directory of the evolution game population.");
	Dialog.show();


imageDIR = getDirectory("Select folder you wish to use.");
configFilePath=imageDIR;
tempString = "select=["+ configFilePath+"]";



PopLocal = getDirectory("plugins") + "2 CamoReq/PopLocation.txt";
dataFile = File.open(PopLocal);
print(dataFile, configFilePath );
File.close(dataFile);



//================================================================
//Appearance
//================================================================


setBackgroundColor(50, 50, 50);
setTool("arrow");
ToolOld = 0;



startTimeTest = getTime();
TestTime= getTime()- startTimeTest;

//print(TestTime/1000);

setBatchMode(true);

if (isOpen("ROI Manager")) {
selectWindow("ROI Manager");
run("Close");
}


if( startsWith(getInfo("os.name"), "Windows") ==1){
LoadingDirectory = getDirectory("plugins") + "1 CamoEvo/Interface/Loading/01.jpg";
} else {
LoadingDirectory = getDirectory("plugins") + "1 CamoEvo/Interface/Loading/";
}

if( startsWith(getInfo("os.name"), "Windows") ==1){
EvolvingDirectory = getDirectory("plugins") + "1 CamoEvo/Interface/Evolving/01.jpg";
} else {
EvolvingDirectory = getDirectory("plugins") + "1 CamoEvo/Interface/Evolving/";
}



//----------------------------------------------------------------------------------------------------------------
// 1) Get Scale Settings
//----------------------------------------------------------------------------------------------------------------

//=========================
//Check if Loading is Open
//=========================

if(isOpen("Loading")){
selectImage("Loading");
rename("scale");

}


//=========================
//Get Scale if is Open
//=========================


if(isOpen("scale")){
run("Image Sequence...", "open=[&LoadingDirectory] sort");
selectImage("Loading");
originalPW = getWidth;
originalPH = getHeight;
close("Loading");

selectImage("scale");
fullWidth = getWidth;
fullHeight = getHeight;

xButtonShift = (fullWidth - originalPW);
getLocationAndSize(x, y, width, height);
interfaceX=x;
interfaceY=y;
interfaceW=width;
interfaceH=height;

setLocation(interfaceX, interfaceY, interfaceW, interfaceH);
rename("Loading");



} else{

//=========================
//Get Scale if isn't Open
//=========================


run("Image Sequence...", "open=[&LoadingDirectory] sort");
selectImage("Loading");
setBatchMode("Show");
run("Maximize");
getLocationAndSize(x, y, windowWidth, windowHeight);

originalPW = getWidth;
originalPH = getHeight;

fullScale =  screenWidth/windowWidth;
fullWidth = (getWidth()*fullScale);
fullHeight = (getHeight);

run("Canvas Size...", "width=&fullWidth height=&fullHeight  position=Center");

xButtonShift = (fullWidth - originalPW);


if( startsWith(getInfo("os.name"), "Windows") ==1){
setLocation(screenWidth/2, 0, screenWidth+50 , windowHeight+50);
}else{
setLocation(screenWidth/2, 0, screenWidth , windowHeight);
}
getLocationAndSize(x, y, width, height);


interfaceX=x-((width)/2);
interfaceY=y-10;
interfaceW=width;
interfaceH=height;

setLocation(interfaceX, interfaceY, interfaceW, interfaceH);

}


selectImage("Loading");


/*
..........................................................................................................................................

														Create Game

..........................................................................................................................................

*/


//----------------------------------------------------------------------------------------------------------------
// 0) Setup New Generation
//----------------------------------------------------------------------------------------------------------------



//=========================
//Get Population Settings
//=========================

GameDirectory = getDirectory("plugins") + "1 CamoEvo/Interface/Game/";


PopLocal = getDirectory("plugins") + "2 CamoReq/PopLocation.txt";
PopLocation = File.openAsString(PopLocal);
PopLocation=split(PopLocation, "\n");
PopLocation = PopLocation[0];
PopLocation = PopLocation;

if(!File.exists(GameDirectory+"01.jpg")){
exit("Game Screen Img, missing, reinstall suggested");
}

PopulationSet = PopLocation+"PopulationSettings.txt";
PopulationSettings = File.openAsString(PopulationSet );
PopulationSettings = split(PopulationSettings, "\n");

TargetSet = split(PopulationSettings[0],"\t");
TargetSetting = TargetSet[1];

PopSize = split(PopulationSettings[2],"\t");
PopSize = PopSize [1];


TimeOutTime = split(PopulationSettings[4],"\t");
TimeOutTime = parseFloat(TimeOutTime [1]);

numPerSlide = split(PopulationSettings[3],"\t");
numPerSlide = parseFloat(numPerSlide [1]);

PopulationSet = PopLocation+"PopulationSettings.txt";
PopulationSettings = File.openAsString(PopulationSet );
PopulationSettings = split(PopulationSettings, "\n");


TargetSet = split(PopulationSettings[0],"\t");
TargetSetting = TargetSet[1];



//=========================
//Get Target Settings
//=========================

TargetChoice = TargetSetting;

TargetDirectory = getDirectory("plugins")+ "1 CamoEvo/Targets/";

TargetSettings = File.openAsString(TargetDirectory+"Target_Settings.txt");
TargetSettingsRows = split(TargetSettings , "\n");

for(i=0; i<TargetSettingsRows.length; i++){
temp = TargetSettingsRows[i];

if(startsWith(temp, TargetChoice)){
TargetSetting = temp;
}

}

TargetChoiceSettings = split(TargetSetting, "\t");

TargetChoiceScale = parseFloat(TargetChoiceSettings[2]);
TargetPatternChoice = TargetChoiceSettings[3];
TargetChoiceMinRotation = parseFloat(TargetChoiceSettings[5]);
TargetChoiceMaxRotation = parseFloat(TargetChoiceSettings[6]);


startTimeTest = getTime();
TestTime= getTime()- startTimeTest;




//=========================
//Check for Generation 0
//=========================

//If there is no Generation 0 Create one
//----------------------------------------------

if(!File.exists(PopLocation+"generation_0.txt")){

run("CamoEvo ImageGA Relay");

}

checkZ=1;

runCount=-1;

while(checkZ==1){



CheckDirectory = PopLocation;

checkA = 1;
checkB1 = getFileList(CheckDirectory);
checkB1 = checkB1.length;

checkB2 = getFileList(CheckDirectory);
checkB2 = checkB2.length;



while(checkA==1){

setBatchMode(true);

//===============================
//Get Current Generation
//===============================

CheckDirectory = PopLocation;

GeneratArray = newArray();

GeneratList  =  getFileList(CheckDirectory);


for(i=0; i<GeneratList.length; i++) { // list all .txt files

	if(endsWith(GeneratList[i], "_survival.txt")==1)

		GeneratArray = Array.concat(GeneratArray, GeneratList[i]);
}



ArrayLeng = lengthOf(GeneratArray);

csv = ".csv";
tif = ".tif";
txt = ".txt";
png = ".png";

GenNumber = ArrayLeng;
GenNum = CheckDirectory + "generation_" + GenNumber + txt;
GenName = "generation_" + GenNumber + txt;
SurvGenNum= CheckDirectory + "generation_" + GenNumber +"_survival" + txt;

runCount=runCount+1;


//===============================
//Run Evolving Animation
//===============================

if(!isOpen("Evolving")){
run("Image Sequence...", "open=[&EvolvingDirectory] sort");
}

if(runCount==0){

if(isOpen("Evolving")){

selectImage("Evolving");
setBatchMode("show");
run("Maximize");
run("Canvas Size...", "width=&fullWidth height=&fullHeight  position=Center");
for(i=0;i<4;i++){
setSlice(i+1);

 setFont("Caldibri ", 52, "bold");
 setColor( "#16150D");

fillRect(154 + (xButtonShift/2), 426, 1176, 204);

 setColor("white");



setJustification("center");

 stringT= " Evolving Generation "+GenNumber+" ... ";

 drawString(stringT, 740 + (xButtonShift/2), 552, "#16150D");



}

run("Canvas Size...", "width=&fullWidth height=&fullHeight  position=Center");
setBatchMode("Show");
run("Maximize");
setLocation(interfaceX, interfaceY, interfaceW, interfaceH);


if(isOpen("Evolving")){
selectImage("Evolving");
run("Animation Options...", "speed="+6);
doCommand("Start Animation");
}
}
}


//===============================
//Hide Loading Animation
//===============================

if(isOpen("Loading")){
selectImage("Loading");
setBatchMode("hide");
}



//===============================
//Check if Generation Exists
//===============================

if(File.exists(GenNum)){
GenerationString=File.openAsString(GenNum);	// open txt data file
GenerationRows=split(GenerationString, "\n");

PatternTemplate = getDirectory("plugins") + "2 CamoReq/PatternTemplate.txt";



//==================================
//Create Population
//==================================


//Create Image Directory
//---------------------------------

fold = "GenPat_" + GenNumber;
foldOld = "GenPat_" + GenNumber-1;
PatternPath = CheckDirectory + fold;
PriorPath = CheckDirectory + foldOld;




//Work out existing patterns
//---------------------------------
//IF there is already patterns for that Generation,don't remake them.
// If the file already exists and its size == the desired pop size then don't make pattersn.


CheckLength = getFileList(PatternPath);

if(CheckLength.length<PopSize || !File.exists(PatternPath)) {
File.makeDirectory(PatternPath );

if(GenNumber>0){ 	 // if it is generation 1 or higher it will check which individuals have survived without mutating, and save them without remaking them. 
					 // this preserves the exact same phenotype.
				
				
notMade=newArray();

for(i=1; i<GenerationRows.length; i++){
Temp = split(GenerationRows[i], "\t");
Temp = Temp[0];
patternGet = PriorPath + "/" + Temp + tif;


if(File.exists(patternGet) == 1){
	while(!isOpen(Temp + tif)){
	open(patternGet);
}

selectImage(Temp + tif);

title = getTitle();
newName = replace (title, ".tif", "");
rename(newName);


} else {
	str=GenerationRows[i];
	notMade=Array.concat(notMade,str);
}



}



dataFile = File.open(PatternTemplate);  // writes the pattern genome to a temporary text file, which the target generator then uses.

	print(dataFile, GenerationRows[0]);
	
	for(i=0; i<notMade.length; i++){
	print(dataFile, notMade[i]);
	
	}
	File.close(dataFile);

}


//Copy all if Gen = 0
//---------------------------------

if(GenNumber==0){ // if it is generation 0 it will need to generate all the patterns no matter what.

	dataFile = File.open(PatternTemplate);
	
	for(i=0; i<GenerationRows.length; i++){	// writes the pattern genome to a temporary text file, which the target generator then uses.
	
	print(dataFile, GenerationRows[i]);
	
	}
	File.close(dataFile);
}




//Create Patterns
//---------------------------------



if(TargetPatternChoice =="egg"){
run("Generate Eggs");
}else{
run("Generate Targets");
}




//Save Patterns
//---------------------------------

WinNam = getList("image.titles");
Win = lengthOf(WinNam);

for ( i=0; i<Win; i++ ) { 

pat = "/" + WinNam[i] + tif;
PatternPath = CheckDirectory + fold + pat;
selectWindow(WinNam[i]);

if(endsWith(WinNam[i], ".tif")){

close(WinNam[i]);
} else {

if(startsWith(WinNam[i], "Gen")==1 || startsWith(WinNam[i], "gloss")==1){

saveAs("Tiff", PatternPath); 

close(WinNam[i]+".tif");

}
}
}



}


PatternCombinedPath = CheckDirectory + "Combined_"+fold+"/";


//----------------------------------------------------------------------------------------------------------------
// 1) Setup Game Slides
//----------------------------------------------------------------------------------------------------------------


//================================================
//Generate Random Pattern and Background Orders
//================================================


BackgroundsDirectory = PopLocation+"Backgrounds/";
BackgroundList  =  getFileList(BackgroundsDirectory);

PatternPath = CheckDirectory + fold;
PatternList = getFileList(PatternPath);

// Target  Orders
//---------------------------------
randOrder=newArray(PatternList.length);


for(i=0; i<PatternList.length;i++){
randOrder[i] = random();
}

randOrder = Array.rankPositions(randOrder);

randomTargets =newArray();


for(i=0; i<PatternList.length; i++){
str=randOrder[i];
randomTargets  = Array.concat(randomTargets , PatternList[str]);
}


// Background  Orders
//---------------------------------
if(PatternList.length > BackgroundList.length){
extendLoop = PatternList.length / BackgroundList.length;
} else {
extendLoop =1; 
}

randOrder=newArray();

for(j=0; j<extendLoop; j++){
randArray=newArray(BackgroundList.length);

for(i=0; i<BackgroundList.length;i++){
randArray[i] = random();
}

randArray = Array.rankPositions(randArray);


randOrder = Array.concat(randOrder,randArray );

}


randomBackgrounds =newArray();


for(i=0; i<PatternList.length / numPerSlide; i++){

num=i;

str=randOrder[num];

for(j=0; j< numPerSlide; j++){

randomBackgrounds = Array.concat(randomBackgrounds, BackgroundList[str]);

}

}





//================================================
//Crop the Background Images to Insure Fit
//================================================

open(BackgroundsDirectory + randomBackgrounds[0]);

run("Select All");
Roi.getBounds(x, y, width, height);

if(height>width){
imageScale = width/originalPW;
}

if(width>height){
imageScale = height/originalPH;
}


cropW=originalPW*imageScale ;
cropH=originalPH*imageScale;
cropX=0;
cropY=0;
if(height>cropH){
cropY=(height-cropH)/2;
}



makeRectangle(cropX, cropY, cropW, cropH);
run("Crop");

run("Select All");
Roi.getBounds(x, y, width, height);

loadX=x;
loadY=y;
loadW=width;
loadH=height;


rename("slide0");


run("Select All");
run("Copy");
setPasteMode("Copy");


newImage("GameSlides", "RGB black",  originalPW, originalPH, ((randomBackgrounds.length) / (numPerSlide))+1);

setSlice(2);

run("Paste");

close("slide0");





//================================================
//Apply Backgrounds to Slides
//================================================

for(i=1;i<randomBackgrounds.length / (numPerSlide) ;i++){

open(BackgroundsDirectory + randomBackgrounds[i]);

selectImage(randomBackgrounds[i]);
makeRectangle(cropX, cropY, cropW, cropH);

run("Copy");
setPasteMode("Copy");
close(randomBackgrounds[i]);

selectImage("GameSlides");
setSlice(2+(i));
run("Paste");


}



TestTime= getTime()- startTimeTest;

//print(TestTime/1000);


//print("");
//print("");
//print("Add Targets");
startTimeTest = getTime();

TestTime= getTime()- startTimeTest;

//print(TestTime/1000);


//----------------------------------------------------------------------------------------------------------------
// 2) Add Targets to Slides
//----------------------------------------------------------------------------------------------------------------


//================================================
//Save Directory
//================================================
File.makeDirectory(PatternCombinedPath);




//================================================
//Get Measures
//================================================
selectImage("GameSlides");
run("Select All");
Roi.getBounds(x, y, width, height);
run("Select None");

bgWidth= width;
bgHeight= height;


targetScale=TargetChoiceScale;

//================================================
//Add Wait Slide
//================================================
// Adds the slide with the cursor oval

setSlice(1);
setColor("White");
setLineWidth(5);

setFont("Caldibri ", 52, "bold");
 setColor( "White");
 stringI= "Place your your cursor inside the circle";
drawString(stringI, bgWidth/2, (bgHeight/2)-350);

setFont("Caldibri ", 42, "bold");
 stringI= "(Don't move your cursor until you spot the target)";
drawString(stringI, bgWidth/2, (bgHeight/2)-210);

ovalW=30;
ovalH=30;
ovalX= (getWidth/2)-(ovalW/2) ;
ovalY= (getHeight/2)-(ovalH/2);
ovalCX = (getWidth/2);
ovalCY = (getHeight/2);

drawOval(ovalX,ovalY,ovalW,ovalH);


//================================================
//Apply Targets to Slides
//================================================


// Record Values
//---------------------------------

targetXcoords = newArray();
targetYcoords = newArray();
targetFlip = newArray();
targetAngle = newArray();


luminanceDifference = newArray();
patternDifference = newArray();
colourDifference = newArray();
GabRatArray = newArray();


for(i=0; i<(PopSize); i++){   // Loop

TargetPath = CheckDirectory + fold + "/" + randomTargets[i];


// Open and Rescale Target
//---------------------------------
open(TargetPath);
rename("Target");

run("Select All");
Roi.getBounds(x, y, width, height);

targetReScale = targetScale/650;
widthReScale = height*targetReScale;

ts = "x=- y=- height=" + widthReScale + " width= "+ widthReScale + "  interpolation=None";
ts2 = "width="+ widthReScale + " height=" + widthReScale + " position=Center";

run("Scale...", ts);
run("Canvas Size...", ts2);



// Flip & Rotate the Target
//---------------------------------

rotation = TargetChoiceMinRotation + (random()*( TargetChoiceMaxRotation -  TargetChoiceMinRotation));


flip=parseInt(random());
if(flip==0){
flip="none";
}
if(flip==1){
flip="horizontal";
run("Flip Horizontally");
}

targetAngle=Array.concat(targetAngle,rotation);

targetFlip=Array.concat(targetFlip,flip);

run("Rotate... ", "angle=[&rotation] grid=1 interpolation=None");


dirArray=newArray(-1,1);
dirX=dirArray[	parseInt(	random()	) ];
dirY=dirArray[		parseInt(	random()	) ];


// Record X and Y Coordinates
//---------------------------------

coordArrayCheck1 = i/numPerSlide;
coordArrayCheck2 = floor(i/numPerSlide);

if(coordArrayCheck1==coordArrayCheck2){

priorAngle = newArray();
priorX = newArray();
priorY = newArray();

saveCheck = 0;

nameNumber =-1;

while(roiManager("count")>0){
roiManager("select",0);
roiManager("delete");

}

}

nameNumber = nameNumber + 1;

roiManager("Show None");

//Use Mask to Copy Target
//---------------------------------

selectImage("Target");
		run("Select All");
		run("Duplicate...", "title=mask");
		run("8-bit");
		setThreshold(1, 255);
		
		run("Create Selection");
		roiManager("Add");
		roiManager("select", roiManager("count")-1);
		rename("copy");
		
		run("Select All");
		roiManager("Add")
		roiManager("select", roiManager("count")-1);
		rename("copySquare");
		
		roiManager("deselect");
		
		close("copySquare");



//Generate X and Y Coordinate
//-----------------------------

	loopRandomGate = 0;

	while(loopRandomGate == 0){

	loopRandomGate = 1;
	
	targetD = widthReScale;
	
	
// i) Creates a coordinate that doesn't overlap with the centre or fall outside the screen.
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	Xcoord=(bgWidth/2)-(widthReScale/2); 
	Ycoord=(bgHeight/2)-(widthReScale/2);
	
	
	xDimension = bgWidth;
	yDimension = bgHeight;
	
	setColor("black");
	fillOval(Xcoord, Ycoord, targetD, targetD);

	
	
	knownDimensionArray = newArray((xDimension/2),(yDimension/2));
	randChoice = parseInt(random());


	if(randChoice == 0){
		dimensionKnown = "x";
		} else {
		dimensionKnown = "y";
		}

	dimensionKnownValue = (targetD*1.25) + (random() * (knownDimensionArray[randChoice] - (targetD*2) ));
	
	randomAngle = random()*45*(PI/180);

	adjacent = dimensionKnownValue;
	opposite = tan(randomAngle) *adjacent ;

	if(randChoice == 0){
	xDist = adjacent ;
	yDist = opposite;

if(yDist > ((yDimension/2) - targetD )  ){
yDist = (yDimension/2) - targetD   ;
}

} else {
xDist = opposite;
yDist = adjacent ;

if(xDist > ((xDimension/2) - targetD )  ){
xDist = (xDimension/2)  -targetD  ;
}

}

randMod = newArray(-1, 1);
randX = randMod[parseInt(random())];
randY =randMod[parseInt(random())];


Xcoord = Xcoord + (xDist * randX) ;
Ycoord = Ycoord + (yDist * randY) ;




// ii) Check 3 times that it doesn't overlap with existing targets
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		for(l =0; l<3; l++){
		for(Z = 0; Z<priorX.length; Z++){

		
		DisX = Math.sqrt( Math.sqr( Xcoord - priorX[Z]));
		DisY = Math.sqrt( Math.sqr( Ycoord - priorY[Z]));
		DisPythag = Math.sqrt( Math.sqr(DisX) + Math.sqr(DisY) );
		
		DisX2 =  Xcoord - priorX[Z];
		DisY2 =  Ycoord - priorY[Z];
		
		if(DisPythag<(targetD*1.25) ){

		if(DisX<(targetD*1.25)){

		if(DisX2<0){
		Xcoord = Xcoord - (targetD/2);
		}
		
		if(DisX2>0){
		Xcoord = Xcoord  + (targetD/2);
		}

		
		}

		if(DisY<(targetD*1.25)){

		
		if(DisY2<0){
		Ycoord = Ycoord  - (targetD/2);
		}
		
		
		if(DisY2>0){
		Ycoord = Ycoord + (targetD/2);
		}
		}
		}
		

		
		}
		}
	
		if(Xcoord < 0 || (Xcoord+widthReScale) > bgWidth || (Ycoord+widthReScale) > bgHeight || Ycoord < 0){
		
		loopRandomGate = 0;

		}
	}

priorAngle = Array.concat(priorAngle, randomAngle);
priorX = Array.concat(priorX, Xcoord);
priorY = Array.concat(priorY, Ycoord);



if( (2+(floor(i/numPerSlide))) <= ( ( parseFloat(PopSize) ) / numPerSlide) +1 ){


// Copy Target to the Image
//---------------------------------

selectImage("Target");
		
		roiManager("Select", roiManager("Count")-1);
		run("Copy");
		roiManager("deselect");

selectImage("GameSlides");
setSlice(2+(floor(i/numPerSlide)));

		roiManager("Select", roiManager("Count")-1);
		Roi.getBounds(x, y, width, height);
		oldX=x;
		oldY=y;
		oldWidth=width;
		oldHeight = height;
		
		
		Roi.move(Xcoord, Ycoord);
		roiManager("update");
		

		setPasteMode("Transparent-zero");
		run("Paste");
		
		//waitForUser("");

		roiManager("Select", roiManager("Count")-2);
		
		Roi.getBounds(x, y, width, height);
		targetROIx = Xcoord +(x-oldX);
		targetROIy = Ycoord +(y-oldY);
		//print(oldWidth-width);
		//print(oldHeight-height);

		Roi.move(targetROIx, targetROIy);
		roiManager("Add");
		
		
		
		roiManager("select", roiManager("Count")-3);
		roiManager("delete");
		

targetXcoords=Array.concat(targetXcoords,Xcoord);
targetYcoords=Array.concat(targetYcoords,Ycoord);


// Add ROIS
//---------------------------------

roiManager("Select", roiManager("Count")-1);
roiManager("rename", "prey_"+nameNumber);
roiManager("deselect");

roiManager("Select", roiManager("Count")-2);

run("Fit Circle");
run("Scale... ", "x=2 y=2 centered");
roiManager("Add");

roiManager("Select", roiManager("Count")-3);
roiManager("delete");


roiManager("Select", newArray(roiManager("Count")-1, roiManager("Count")-2 ) );
roiManager("XOR");
roiManager("Add");



run("Select All");
roiManager("Add");

roiManager("Select", newArray(roiManager("Count")-1, roiManager("Count")-2 ) );
roiManager("AND");
roiManager("Add");
roiManager("Select", roiManager("Count")-1);
roiManager("rename", "local_"+nameNumber);

roiManager("Select", newArray(roiManager("Count")-2,roiManager("Count")-3, roiManager("Count")-4) );
roiManager("delete");

// Save Slide
//---------------------------------

setSlice(2+(floor(i/numPerSlide)));
run("Select All");

saveCheck=saveCheck+1;

if(saveCheck==numPerSlide){

run("Duplicate...", "title=Save");

selectImage("Save");

run("From ROI Manager");
saveAs("Tiff", PatternCombinedPath + floor(i/numPerSlide) +".tif"); 

close(floor(i/numPerSlide) +".tif");

run("Remove Overlay");
}

close("target");

}


}




//================================================
//Remove ROIs
//================================================

while(roiManager("count")>0){
roiManager("select",0);
roiManager("delete");
}




//================================================
//Save Coordinates, Flip and Rotation
//================================================


IDsArray = newArray("ID");

for(i=0;i<randomTargets.length;i++){

string = replace(randomTargets[i], ".Tif", "");
string = replace(string, ".tif", "");

IDsArray = Array.concat(IDsArray, string);

}

RowNumbers= Array.getSequence(randomTargets.length);

surivalString1 = Array.concat("Img_Num", "Bg", "ID", "X", "Y", "flip", "angle");

surivalString = String.join(surivalString1, "\t");

dataFile = File.open(PatternCombinedPath+"Records.txt");

print(dataFile,surivalString);


for(i=0; i< RowNumbers.length; i++){

surivalString1 = Array.concat(RowNumbers[floor(i/numPerSlide)], randomBackgrounds[i], IDsArray [1+i], targetXcoords[i], targetYcoords[i], targetFlip[i], targetAngle[i]);

surivalString = String.join(surivalString1, "\t");

print(dataFile, surivalString);

}
File.close(dataFile);





selectImage("GameSlides");

//----------------------------------------------------------------------------------------------------------------
// 3) Run the Game
//----------------------------------------------------------------------------------------------------------------


//================================================
//Hide Screens
//================================================



if(isOpen("Loading")){
selectImage("Loading");
setBatchMode("Hide");
}


if(isOpen("Evolving")){
selectImage("Evolving");
setBatchMode("Hide");
}


//================================================
//Ask to Play Screen
//================================================


// Open Screen
//---------------------------------

if(!isOpen("Game")){
if( startsWith(getInfo("os.name"), "Windows") ==1){
playDirectory = getDirectory("plugins") + "1 CamoEvo/Interface/Game/01.jpg";
} else {
playDirectory = getDirectory("plugins") + "1 CamoEvo/Interface/Game/";
}
run("Image Sequence...", "open=[&playDirectory] sort");
}
selectImage("Game");
run("Canvas Size...", "width=&fullWidth height=&fullHeight  position=Center");
setBatchMode("Show");
run("Maximize");
setLocation(interfaceX, interfaceY, interfaceW, interfaceH);


// Add Group Size and Time Out Text
//---------------------------------

//ADD text string
setFont("Caldibri ", 32, "bold");


setColor("#16150D");
fillRect(174 + (xButtonShift/2), 534, 1142, 128);

setColor("white");

setJustification("center");
stringT= "You have "+(TimeOutTime/1000)+" Seconds to click on each target.";
drawString(stringT, 740 + (xButtonShift/2), 580);

 setColor(255,255, 255);
setJustification("center");

TargetString = " target";
if(numPerSlide>1){
TargetString = " targets";
}

stringT= "Each slide will have " + numPerSlide + TargetString +" you need to find.";
drawString(stringT, 740 + (xButtonShift/2), 640);


//BUTTON 1, Play
//-----------------------------------------

	b1_x1= 327  + (xButtonShift/2);
	b1_y1= 772;

	b1_x2= b1_x1 +  355;
	b1_y2= b1_y1 + 210;


//BUTTON 2, Skip
//-----------------------------------------

	b2_x1= 797 + (xButtonShift/2);
	b2_y1= 772;

	b2_x2= 	b2_x1 +  355;
	b2_y2= b2_y1 + 210;


//----------------------------------------

selectImage("Game");



whileGate=0;
exitCheck=0;


run("Select None");

while(whileGate==0){
wait(100);
setSlice(1);
selectImage("Game");

	
	getCursorLoc(mouseX, mouseY, mouseZ, flag); Tool=0;
	
	
		{


		clickX=mouseX; 
		clickY=mouseY;

		//Button 1
		//-----------------
		if( clickX > b1_x1   &&    clickX < b1_x2   &&   clickY > b1_y1 &&  clickY < b1_y2) {
		
			Tool=1;
			Tool=1;   if(flag&16!=0){wait (200);
		whileGate=1;
		exitCheck=0;

		}
		}
		
		//Button 2
		//-----------------
		if( clickX > b2_x1   &&    clickX < b2_x2   &&   clickY > b2_y1 &&  clickY < b2_y2) {
			
			
		Tool=1;
		Tool=1;   if(flag&16!=0){wait (200);
		whileGate=1;
		exitCheck=1;

		}
		}

run("Select None");
if(Tool != ToolOld){
			if(Tool == 0)
				setTool("arrow");
			if(Tool  == 1)
				setTool("hand");
		ToolOld= Tool;
}


}
}



// Back to Main Menu
//---------------------------------

if(exitCheck==1){
if(isOpen("Loading")){
selectImage("Loading");

setBatchMode("Show");
run("Maximize");
setLocation(interfaceX, interfaceY, interfaceW, interfaceH);
 run("Animation Options...", "speed="+6);
doCommand("Start Animation");
setBatchMode(false);
close("\\Others");
} else{
close("*");
}

doCommand("CamoEvo Game");
exit
}



//================================================
//Setup Game
//================================================

// Time Recordings
//---------------------------------
TimesArray=newArray(randomBackgrounds.length+1);
TimesArray[0] = "fitness";

capTimesArray=newArray(randomBackgrounds.length+1);
capTimesArray[0] = "capture_time";

respTimesArray=newArray(randomBackgrounds.length+1);
respTimesArray[0] = "response_time";

while(roiManager("count")>0){
roiManager("select",0);
roiManager("delete");

}
run("Select None");



// Show Slides
//---------------------------------
selectImage("GameSlides");
setSlice(1);
run("Select None");
run("Canvas Size...", "width=&fullWidth height=&fullHeight  position=Center");
setBatchMode("Show");
run("Maximize");
setLocation(interfaceX, interfaceY, interfaceW, interfaceH);

selectImage("Game");

setBatchMode("Hide");



// Hit Box Size
//--------------------------------

selectImage("GameSlides");
ovalW=30;
ovalH=30;
ovalX= (getWidth/2)-(ovalW/2) ;
ovalY= (getHeight/2)-(ovalH/2);
ovalCX = (getWidth/2);
ovalCY = (getHeight/2);
clickLeeway = 1/3;




//================================================
//GamePlay
//================================================

for(j=0;j<randomBackgrounds.length / numPerSlide;j++){
setTool("Arrow");

setLineWidth(1);

if(getImageID() != "GameSlides"){
if(isOpen("GameSlides")){
selectImage("GameSlides");
} else {
close("*");
exit
}

}



// Screen Centre Slide
//--------------------------------

if(getSliceNumber() != (1+(j*2))){
setSlice(1);
}

setColor("black");
fillOval(ovalX, ovalY, ovalW, ovalH);
setColor("white");
setLineWidth(5);
drawOval(ovalX, ovalY, ovalW, ovalH);


centreGate=0;
vLeng=9;

while(centreGate==0){
setColor("black");
fillOval(ovalX, ovalY, ovalW, ovalH);
setColor("white");
setLineWidth(5);
drawOval(ovalX , ovalY, ovalW, ovalH);

for(v=0;v<vLeng;v++){
getCursorLoc(x1, y1, z, modifiers);
wait(100);
getCursorLoc(x2, y2, z, modifiers);

speedCheck = Math.sqrt(Math.sqr(x1-x2)+Math.sqr(y1-y2))/100;
//print(speedCheck);

if(x2>ovalX && y2>ovalY && x2<(ovalX+ovalW) && y2<(ovalY+ovalH)){
centreGate=1;
greyColor = 255/vLeng;
greyColor = v*greyColor;
setColor(greyColor,greyColor,greyColor);
fillOval(ovalX, ovalY, ovalW, ovalH);
}else{

v=0;
setColor("black");
fillOval(ovalX, ovalY, ovalW, ovalH);
setColor("white");
setLineWidth(5);
drawOval(ovalX, ovalY, ovalW, ovalH);
centreGate=0;
}





}
}

getCursorLoc(x, y, z, modifiers);

wait(500);

if(getSliceNumber() != (2+(j))){
setSlice(2+(j));
}

run("Select None");

// Initiate Game Slide
//--------------------------------

		timeOutGate1= 1;
		timeOutGate2= 0;
		timeOutGate3= 0;
		timeOutGate4= 0;
		timeOutGate5= 0;
		timeOutGate6= 0;



		if(numPerSlide == 2){
		timeOutGate2= 1;
		}

		if(numPerSlide == 3){
		timeOutGate2= 1;
		timeOutGate3= 1;
		}

		if(numPerSlide == 4){
		timeOutGate2= 1;
		timeOutGate3= 1;
		timeOutGate4= 1;
		}
		
		
		if(numPerSlide == 6){
		timeOutGate2= 1;
		timeOutGate3= 1;
		timeOutGate4= 1;
		timeOutGate5= 1;
		timeOutGate6= 1;
		}



		startTime = getTime();
		i= getTime()- startTime;
		TimeDeduct=0;
		
		

			// i) Show Slide
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			
				while(i<TimeOutTime){
				
				i= getTime()- startTime;

				if(!isOpen("GameSlides")){
				close("*");
				exit
				
				}

				selectImage("GameSlides");
		
				if(getSliceNumber() != (2+(j))){
				setSlice(2+(j));
				}
				
			
				if(respTimesArray[(j*numPerSlide)+1]==0){
				getCursorLoc(x1, y1, z, modifiers);
				cursorDist = Math.sqrt( Math.sqr(x1-ovalCX) + (y1-ovalCY));
				if(cursorDist>ovalH/2){
				for(v=0;v<numPerSlide;v++){
				respTimesArray[(j*numPerSlide)+v+1]= i;
				}
				}
				}
				
				
				
				
				// ii) Get Click
				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					getCursorLoc(mouseX, mouseY, mouseZ, flag); 
					
					if(flag&16!=0){
					xClick = mouseX- (xButtonShift/2);
					yClick = mouseY;
					
					

					//Target 1 Click?
					
					if(timeOutGate1 == 1){
					
					targetNum = (j*numPerSlide);
					
					DistX = Math.sqrt( Math.sqr(xClick-(targetXcoords[targetNum] + (widthReScale/2)) ));

					DistY = Math.sqrt( Math.sqr(yClick-(targetYcoords[targetNum] + (widthReScale/2)) ));
					

					DistH=Math.sqrt( Math.sqr(DistX) + Math.sqr(DistY) );


						if(DistH <((widthReScale*(0.5+clickLeeway)))){

						capTimesArray[targetNum+1]=i - TimeDeduct;
						TimeDeduct = TimeDeduct + 0.5;
						
						timeOutGate1=0;
						
						
						

						circleX = targetXcoords[targetNum] + (xButtonShift/2);
						circleY = targetYcoords[targetNum];
						setLineWidth(6);
						setColor("green");
						drawOval(circleX-(widthReScale*clickLeeway/2), circleY-(widthReScale*clickLeeway/2), (widthReScale)+(widthReScale*clickLeeway),  (widthReScale)+(widthReScale*clickLeeway));


						

						}
					
					}
					
					//Target 2 Click?
					
					if(timeOutGate2 == 1){
					
					targetNum = (j*numPerSlide)+1;
					
					DistX = Math.sqrt( Math.sqr(xClick-(targetXcoords[targetNum] + (widthReScale/2)) ));

					DistY = Math.sqrt( Math.sqr(yClick-(targetYcoords[targetNum] + (widthReScale/2)) ));

					DistH=Math.sqrt( Math.sqr(DistX) + Math.sqr(DistY) );


						if(DistH <((widthReScale*(0.5+clickLeeway)))){

						capTimesArray[targetNum+1]=i - TimeDeduct;
						TimeDeduct = TimeDeduct + 0.5;
						
						timeOutGate2=0;
						

						circleX = targetXcoords[targetNum] + (xButtonShift/2);
						circleY = targetYcoords[targetNum];
						setLineWidth(6);
						setColor("green");
						drawOval(circleX-(widthReScale*clickLeeway/2), circleY-(widthReScale*clickLeeway/2), (widthReScale)+(widthReScale*clickLeeway),  (widthReScale)+(widthReScale*clickLeeway));


						}
					
					}
					
					
					//Target 3 Click?
					
					if(timeOutGate3 == 1){
					
					targetNum = (j*numPerSlide)+2;
					
					DistX = Math.sqrt( Math.sqr(xClick-(targetXcoords[targetNum] + (widthReScale/2)) ));

					DistY = Math.sqrt( Math.sqr(yClick-(targetYcoords[targetNum] + (widthReScale/2)) ));

					DistH=Math.sqrt( Math.sqr(DistX) + Math.sqr(DistY) );


						if(DistH <((widthReScale*(0.5+clickLeeway)))){

						capTimesArray[targetNum+1]=i - TimeDeduct;
						TimeDeduct = TimeDeduct + 0.5;
						
						timeOutGate3=0;
						

						circleX = targetXcoords[targetNum] + (xButtonShift/2);
						circleY = targetYcoords[targetNum];
						setLineWidth(6);
						setColor("green");
						drawOval(circleX-(widthReScale*clickLeeway/2), circleY-(widthReScale*clickLeeway/2), (widthReScale)+(widthReScale*clickLeeway),  (widthReScale)+(widthReScale*clickLeeway));


						}
					
					}
					
					
					//Target 4 Click?
					
					if(timeOutGate4 == 1){
					
					targetNum = (j*numPerSlide)+3;
					
					DistX = Math.sqrt( Math.sqr(xClick-(targetXcoords[targetNum] + (widthReScale/2)) ));

					DistY = Math.sqrt( Math.sqr(yClick-(targetYcoords[targetNum] + (widthReScale/2)) ));

					DistH=Math.sqrt( Math.sqr(DistX) + Math.sqr(DistY) );


						if(DistH <((widthReScale*(0.5+clickLeeway)))){

						capTimesArray[targetNum+1]=i - TimeDeduct;
						TimeDeduct = TimeDeduct + 0.5;
						
						timeOutGate4=0;
						

						circleX = targetXcoords[targetNum] + (xButtonShift/2);
						circleY = targetYcoords[targetNum];
						setLineWidth(6);
						setColor("green");
						drawOval(circleX-(widthReScale*clickLeeway/2), circleY-(widthReScale*clickLeeway/2), (widthReScale)+(widthReScale*clickLeeway),  (widthReScale)+(widthReScale*clickLeeway));

						


						}
					
					}
					

					//Target 5 Click?
					
					if(timeOutGate5 == 1){
					
					targetNum = (j*numPerSlide)+4;
					
					DistX = Math.sqrt( Math.sqr(xClick-(targetXcoords[targetNum] + (widthReScale/2)) ));

					DistY = Math.sqrt( Math.sqr(yClick-(targetYcoords[targetNum] + (widthReScale/2)) ));

					DistH=Math.sqrt( Math.sqr(DistX) + Math.sqr(DistY) );


						if(DistH <((widthReScale*(0.5+clickLeeway)))){

						capTimesArray[targetNum+1]=i - TimeDeduct;
						TimeDeduct = TimeDeduct + 0.5;
						
						timeOutGate5=0;
						

						circleX = targetXcoords[targetNum] + (xButtonShift/2);
						circleY = targetYcoords[targetNum];
						setLineWidth(6);
						setColor("green");
						drawOval(circleX-(widthReScale*clickLeeway/2), circleY-(widthReScale*clickLeeway/2), (widthReScale)+(widthReScale*clickLeeway),  (widthReScale)+(widthReScale*clickLeeway));
			


						}
					
					}
					
					//Target 6 Click?					
					
					if(timeOutGate6 == 1){
					
					targetNum = (j*numPerSlide)+5;
					
					DistX = Math.sqrt( Math.sqr(xClick-(targetXcoords[targetNum] + (widthReScale/2)) ));

					DistY = Math.sqrt( Math.sqr(yClick-(targetYcoords[targetNum] + (widthReScale/2)) ));

					DistH=Math.sqrt( Math.sqr(DistX) + Math.sqr(DistY) );


						if(DistH <((widthReScale*(0.5+clickLeeway)))){

						capTimesArray[targetNum+1]=i - TimeDeduct;
						TimeDeduct = TimeDeduct + 0.5;
						
						timeOutGate6=0;
						

						circleX = targetXcoords[targetNum] + (xButtonShift/2);
						circleY = targetYcoords[targetNum];
						setLineWidth(6);
						setColor("green");
						drawOval(circleX-(widthReScale*clickLeeway/2), circleY-(widthReScale*clickLeeway/2), (widthReScale)+(widthReScale*clickLeeway),  (widthReScale)+(widthReScale*clickLeeway));
						
						


						}
					
					}
						
			
					run("Select None");
					
					if(timeOutGate1 == 0 && timeOutGate2 == 0 && timeOutGate3 == 0 && timeOutGate4 == 0 && timeOutGate5 == 0 && timeOutGate6 == 0  ){
					i=TimeOutTime;
					}
					
					
					}
					
				
			
				

			

			wait(2);
			
			}
			
			
		// iii) Check for failed to find targets
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
			
		//Target 1 Fail!		

		if(timeOutGate1==1){
		
		targetNum = (j*numPerSlide);

		capTimesArray[targetNum+1]=TimeOutTime;
		respTimesArray[targetNum+1]=TimeOutTime;
		

		circleX = targetXcoords[targetNum] + (xButtonShift/2);
		circleY = targetYcoords[targetNum];

						setLineWidth(6);
						setColor("red");
						drawOval(circleX-(widthReScale*clickLeeway/2), circleY-(widthReScale*clickLeeway/2), (widthReScale)+(widthReScale*clickLeeway),  (widthReScale)+(widthReScale*clickLeeway));

		}
		
		
		//Target 2 Fail!	
		
		if(timeOutGate2==1){
		
		targetNum = (j*numPerSlide)+1;

		capTimesArray[targetNum+1]=TimeOutTime;
		respTimesArray[targetNum+1]=TimeOutTime;

		circleX = targetXcoords[targetNum] + (xButtonShift/2);
		circleY = targetYcoords[targetNum];

						setLineWidth(6);
						setColor("red");
						drawOval(circleX-(widthReScale*clickLeeway/2), circleY-(widthReScale*clickLeeway/2), (widthReScale)+(widthReScale*clickLeeway),  (widthReScale)+(widthReScale*clickLeeway));

		}

		//Target 3 Fail!	

		if(timeOutGate3==1){
		
		targetNum = (j*numPerSlide)+2;

		capTimesArray[targetNum+1]=TimeOutTime;
		respTimesArray[targetNum+1]=TimeOutTime;

		circleX = targetXcoords[targetNum] + (xButtonShift/2);
		circleY = targetYcoords[targetNum];

						setLineWidth(6);
						setColor("red");
						drawOval(circleX-(widthReScale*clickLeeway/2), circleY-(widthReScale*clickLeeway/2), (widthReScale)+(widthReScale*clickLeeway),  (widthReScale)+(widthReScale*clickLeeway));

		}
		
		//Target 4 Fail!			
		
		if(timeOutGate4==1){
		
		targetNum = (j*numPerSlide)+3;

		capTimesArray[targetNum+1]=TimeOutTime;
		respTimesArray[targetNum+1]=TimeOutTime;

		circleX = targetXcoords[targetNum] + (xButtonShift/2);
		circleY = targetYcoords[targetNum];

						setLineWidth(6);
						setColor("red");
						drawOval(circleX-(widthReScale*clickLeeway/2), circleY-(widthReScale*clickLeeway/2), (widthReScale)+(widthReScale*clickLeeway),  (widthReScale)+(widthReScale*clickLeeway));

		}
		
		//Target 5 Fail!			
		
		if(timeOutGate5==1){
		
		targetNum = (j*numPerSlide)+4;

		capTimesArray[targetNum+1]=TimeOutTime;
		respTimesArray[targetNum+1]=TimeOutTime;

		circleX = targetXcoords[targetNum] + (xButtonShift/2);
		circleY = targetYcoords[targetNum];

						setLineWidth(6);
						setColor("red");
						drawOval(circleX-(widthReScale*clickLeeway/2), circleY-(widthReScale*clickLeeway/2), (widthReScale)+(widthReScale*clickLeeway),  (widthReScale)+(widthReScale*clickLeeway));

		}
		
		
		//Target 6 Fail!			
		
		if(timeOutGate6==1){
		
		targetNum = (j*numPerSlide)+5;

		capTimesArray[targetNum+1]=TimeOutTime;
		respTimesArray[targetNum+1]=TimeOutTime;

		circleX = targetXcoords[targetNum] + (xButtonShift/2);
		circleY = targetYcoords[targetNum];
						setLineWidth(6);
						setColor("red");
						drawOval(circleX-(widthReScale*clickLeeway/2), circleY-(widthReScale*clickLeeway/2), (widthReScale)+(widthReScale*clickLeeway),  (widthReScale)+(widthReScale*clickLeeway));

		}
		
		
		
		if(timeOutGate1==1 || timeOutGate2==1 || timeOutGate3==1 || timeOutGate4==1 || timeOutGate5==1 || timeOutGate6==1 ){
		wait(1500);
		} else {
		wait(500);
		}

		}




for(i=1; i <capTimesArray.length;i++){
if(respTimesArray[i] >= capTimesArray[i] - 600){
TimesArray[i] = respTimesArray[i];
}else{
TimesArray[i] = capTimesArray[i];
}
}






/*
..........................................................................................................................................

														Evolve Next Generation

..........................................................................................................................................

*/



//----------------------------------------------------------------------------------------------------------------
// 0) Run Finale Features
//----------------------------------------------------------------------------------------------------------------

//=========================
//Run Evolving Animation
//========================


if(isOpen("Evolving")){
selectImage("Evolving");
run("Canvas Size...", "width=&fullWidth height=&fullHeight  position=Center");
for(i=0;i<4;i++){
setSlice(i+1);

 setFont("Caldibri ", 52, "bold");
 setColor( "#16150D");

fillRect(154 + (xButtonShift/2), 426, 1176, 204);


 setColor("white");



setJustification("center");

 stringT= " Evolving Generation "+(GenNumber+1)+" ... ";

 drawString(stringT, 740 + (xButtonShift/2), 552);

}

selectImage("Evolving");
setBatchMode("Show");
run("Maximize");
setLocation(interfaceX, interfaceY, interfaceW, interfaceH);

run("Animation Options...", "speed="+6);
doCommand("Start Animation");
}

selectImage("GameSlides");
close("GameSlides");


//==============================-
//Save Results
//==============================


if(File.exists(SurvGenNum)==1){
File.delete(SurvGenNum);
}


for(i=0; i< TimesArray.length; i++){

surivalString1 = Array.concat(IDsArray[i], TimesArray[i], respTimesArray[i], capTimesArray[i]);

surivalString = String.join(surivalString1, "\t");

File.append(surivalString, SurvGenNum);




}
}


//----------------------------------------------------------------------------------------------------------------
// 1) Run Genetic Algorithm
//----------------------------------------------------------------------------------------------------------------

//==============================
//Image GA
//==============================


DirectoryString= "select=[" + CheckDirectory+ "]";

setBatchMode(true);
run("ImageGA Algorithm", DirectoryString);



//========================================
//Check whether a new generation was made?
//=======================================



checkB1 = getFileList(CheckDirectory);
checkB1 = checkB1.length;


	if(checkB1>checkB2){

	checkB2 = getFileList(CheckDirectory);
	checkB2 = checkB2.length;
	
	} else {

	checkA=0;

	}


} // This will Loop until ImageGA stops producing new generations



/*
..........................................................................................................................................

															End Screen

..........................................................................................................................................

*/



//----------------------------------------------------------------------------------------------------------------
// 0) Show End Menu
//----------------------------------------------------------------------------------------------------------------

//=======================================
//Hide Loading
//=======================================
if(!isOpen("Loading")){
run("Image Sequence...", "open=[&LoadingDirectory] sort");
run("Canvas Size...", "width=&fullWidth height=&fullHeight  position=Center");
}
selectImage("Loading");
setBatchMode("hide");



checkZ=0;



//=======================================
//Open End Screen
//=======================================


if(!isOpen("EndScreen")){
if( startsWith(getInfo("os.name"), "Windows") ==1){
FinishedDirectory = getDirectory("plugins") + "1 CamoEvo/Interface/End/01.jpg";
} else {
FinishedDirectory = getDirectory("plugins") + "1 CamoEvo/Interface/End/";
}


run("Image Sequence...", "open=[&FinishedDirectory] sort");
rename("EndScreen");

}

selectImage("EndScreen");

run("Canvas Size...", "width=&fullWidth height=&fullHeight  position=Center");
setBatchMode("Show");
run("Maximize");
setLocation(interfaceX, interfaceY, interfaceW, interfaceH);

Slide=1;


//=======================================
//Close Evolving
//=======================================
if(isOpen("evolving")){
close("evolving");
}


//BUTTON 1, Run Camo Anlysis
//-----------------------------------------


	b1_x1= 386 + (xButtonShift/2);
	b1_y1= 478;

	b1_x2= b1_x1 + 694;
	b1_y2= b1_y1 + 156;
	
	
//BUTTON 2, Play More
//-----------------------------------------


	b2_x1= 386 + (xButtonShift/2);
	b2_y1= 688;

	b2_x2= b2_x1 + 694;
	b2_y2= b2_y1 + 156;
	
	
//BUTTON 3, Exit
//-----------------------------------------


	b3_x1= 386 + (xButtonShift/2);
	b3_y1= 896;

	b3_x2= b3_x1 + 694;
	b3_y2= b3_y1 + 156;
	
	


keepGoing=0;
whileGate2=0;

selectImage("EndScreen");
run("Select None");

wait(100);



while(whileGate2==0){
wait(100);

	setSlice(Slide);

	selectImage("EndScreen");

	
	getCursorLoc(mouseX, mouseY, mouseZ, flag); Tool=0;
	
	
		{


		clickX=mouseX;  
		clickY=mouseY;

		//Button 1
		//-----------------
		if( clickX > b1_x1   &&    clickX < b1_x2   &&   clickY > b1_y1 &&  clickY < b1_y2) {
		
		Tool=1;
		Tool=1;   if(flag&16!=0){wait (200);
		keepGoing=0;
		whileGate2=1;

		}
		}
		
		//Button 2
		//-----------------
		if( clickX > b2_x1   &&    clickX < b2_x2   &&   clickY > b2_y1 &&  clickY < b2_y2) {


		Tool=1;
		Tool=1;   if(flag&16!=0){wait (200);
		keepGoing=1;
		whileGate2=1;

		}
		}
		
		//Button 3
		//-----------------
		if( clickX > b3_x1   &&    clickX < b3_x2   &&   clickY > b3_y1 &&  clickY < b3_y2) {

		Tool=1;
		Tool=1;   if(flag&16!=0){wait (200);
		
if(isOpen("Loading")){
selectImage("Loading");
setBatchMode("Show");
run("Maximize");
setLocation(interfaceX, interfaceY, interfaceW, interfaceH);
 run("Animation Options...", "speed="+6);
doCommand("Start Animation");
setBatchMode(false);
close("\\Others");
} else{
close("*");
}
doCommand("CamoEvo Game");
exit

		}
		}

		run("Select None");
		if(Tool != ToolOld){
			if(Tool == 0)
				setTool("arrow");
			if(Tool  == 1)
				setTool("hand");
		ToolOld= Tool;
}

		}




}





//----------------------------------------------------------------------------------------------------------------
// 1) Run for 5 Additional Generations
//----------------------------------------------------------------------------------------------------------------

//=================================================
// Loop if you Choose to Keep Going
//=================================================
if(keepGoing==1){
setBatchMode("hide");


selectImage("Loading");
run("Canvas Size...", "width=&fullWidth height=&fullHeight  position=Center");
setBatchMode("Show");
run("Maximize");
setLocation(interfaceX, interfaceY, interfaceW, interfaceH);
 run("Animation Options...", "speed="+6);
doCommand("Start Animation");

//=================================================
// Add 5 generations to Population Settings
//=================================================
PopulationSet = PopLocation+"PopulationSettings.txt";
PopulationSettings = File.openAsString(PopulationSet );
PopulationSettings = split(PopulationSettings, "\n");

Line1=PopulationSettings [0];
Line2=PopulationSettings [1];
Line3=PopulationSettings [2];
Line4=PopulationSettings [3];
Line5=PopulationSettings [4];

Line2 = split(Line2,"\t");
Line2 = newArray(Line2[0], parseFloat(Line2[1])+5);
Line2 = String.join(Line2,"\t");

PopulationSettings= String.join(Array.concat(Line1,Line2,Line3,Line4,Line5), "\n");


File.delete(PopulationSet);
File.append(PopulationSettings,PopulationSet);


checkZ=1;

//=================================================
// Add 5 generations to Algorithm Settings
//=================================================
AlgorithimSet = PopLocation+"AlgorithmSettings.txt";
AlgorithimSettings = File.openAsString(AlgorithimSet);
AlgorithimSettings = split(AlgorithimSettings, "\n");
AlgorithimSettings[7]=parseFloat(AlgorithimSettings[7])+5;
AlgorithimSettings = String.join(AlgorithimSettings, "\n");

File.delete(AlgorithimSet);

File.append(AlgorithimSettings, AlgorithimSet);



if( startsWith(getInfo("os.name"), "Windows") ==1){
EvolvingDirectory = getDirectory("plugins") + "1 CamoEvo/Interface/Evolving/01.jpg";
} else {
EvolvingDirectory = getDirectory("plugins") + "1 CamoEvo/Interface/Evolving/";
}


if(!isOpen("Evolving")){
run("Image Sequence...", "open=[&EvolvingDirectory] sort");
}




//----------------------------------------------------------------------------------------------------------------
// 2) Run Analyses
//----------------------------------------------------------------------------------------------------------------
} else{


//=================================================
//Close Unnecesary Slides
//=================================================

if(!isOpen("Evolving")){
close("Evolving");
}
if(!isOpen("Evolving")){
close("Evolving");
}



//=================================================
//Run Analysing Animation
//=================================================


if( startsWith(getInfo("os.name"), "Windows") ==1){
AnalysingDirectory = getDirectory("plugins") + "1 CamoEvo/Interface/Analysing/01.jpg";
} else {
AnalysingDirectory = getDirectory("plugins") + "1 CamoEvo/Interface/Analysing/";
}


run("Image Sequence...", "open=[&AnalysingDirectory] sort");
rename("Analysing");
run("Canvas Size...", "width=&fullWidth height=&fullHeight  position=Center");
setBatchMode("Show");
run("Maximize");
setLocation(interfaceX, interfaceY, interfaceW, interfaceH);
 run("Animation Options...", "speed="+6);
doCommand("Start Animation");


if(isOpen("EndScreen")){
selectImage("EndScreen");
setBatchMode("hide");
}




//=================================================
//Get Data
//=================================================

// Get Fitness
//------------------

		survivalDIR = CheckDirectory;

		survivalArray = newArray();

		survivalList  =  getFileList(survivalDIR);

		Leng = lengthOf(survivalList);

		for(i=0; i<Leng; i++) { 
			if(endsWith(survivalList[i], "_survival.txt")==1){

				survivalArray = Array.concat(survivalArray, survivalList[i]);
			}}


		GenArray = newArray();
		IDarray = newArray();
		FitnessArray = newArray();
		ResponseArray = newArray();
		CaptureArray = newArray();
		
		
		FitnessMean=newArray();

		shortGenArray = newArray();
		FitnessMeanArray = newArray();
		FitnessErrorArray = newArray();
		TimeoutArray = newArray();
		genomeArray = newArray();


		for (i=0; i<survivalArray.length; i++){
		
		IDtempArray=newArray();

		GenNum = survivalDIR + "generation_" + i + "_survival" + txt;
		GenName = "generation_" + i + "_survival" + txt;

		referenceString=File.openAsString(GenNum);	// open txt data file
		referenceRows=split(referenceString, "\n");
		referenceRows = Array.deleteIndex(referenceRows, 0);
		
		L = referenceRows.length;

		IDs = newArray(L);
		Fitness = newArray(L);
		
		Response = newArray(L);
		Capture = newArray(L);
		
		Real=newArray(L);
		
		TimeOut = 0;

		for(f=0; f<L; f++){
		
		Temp=split(referenceRows[f], "\t");
		
		GenArray = Array.concat(GenArray, i);
		
		IDs[f] = Temp[0];
		
		Fitness[f]= Temp[1];
		Response[f] = Temp[2];
		Capture[f] = Temp[3];

		if(Fitness[f]==TimeOutTime){
		TimeOut = TimeOut+1;
		}


		if(Temp.length==3){
		Real[f] = Temp[2];
		}else{
		Real[f] = "";
		}
		}
		
		//Array.show(IDs);
		
		GenomeNum = survivalDIR + "generation_" + i  + txt;
		
		
		referenceString=File.openAsString(GenomeNum);	// open txt data file
		referenceRows=split(referenceString, "\n");
		GenomeNames = referenceRows[0];
		GenomeNames = split(GenomeNames,"\t");
		GenomeNames = Array.deleteIndex(GenomeNames, 0);
		GenomeNames = String.join(GenomeNames, "\t");
		referenceRows = Array.deleteIndex(referenceRows, 0);
		
		//Array.show(referenceRows);
		
		L = referenceRows.length;
		
		for(f=0; f<L; f++){
		IDname = IDs[f];
		
		for(v=0; v<L; v++){
		if(startsWith(referenceRows[v],IDname)){
		splitStr = split(referenceRows[v],"\t");
		genomeStr = Array.deleteIndex(splitStr, 0);
		genomeStr =String.join(genomeStr, "\t");
		genomeArray=Array.concat(genomeArray, genomeStr);
		}
		}
		
		
		}
		
		
		
	
		

		shortGenArray = Array.concat(shortGenArray, i);

		TimeoutArray = Array.concat(TimeoutArray, TimeOut);

		Array.getStatistics(Fitness, min, max, mean, stdDev);

		FitnessMeanArray = Array.concat(FitnessMeanArray, mean);
		FitnessErrorArray =  Array.concat(FitnessErrorArray, stdDev/Math.sqrt(Fitness.length));

		FitnessArray = Array.concat(FitnessArray, Fitness);
		ResponseArray = Array.concat(ResponseArray, Response);
		CaptureArray = Array.concat(CaptureArray, Capture);
		
		RealArray = Array.concat(RealArray, Real);
		IDarray = Array.concat(IDarray, IDs);

		

		}

	
	//Array.show("check2",genomeArray);
		

		 
				//  Line Plot
				 
				Array.getStatistics( shortGenArray, min, max, mean, stdDev);
				xMax = max+0.2;
				Array.getStatistics( FitnessMeanArray, min, max, mean, stdDev);
				yMax = max;
				Array.getStatistics( FitnessErrorArray, min, max, mean, stdDev);
				yMax = yMax + max +1000;
				if(yMax>=TimeOutTime){
				yMax=TimeOutTime;
				}
				Plot.create("Line Plot", "Generation", "Survival Time (milliseconds)", shortGenArray, FitnessMeanArray);
				Plot.setLineWidth(3);
				Plot.setFontSize(30);
				Plot.setAxisLabelSize(36, "bold");
				Plot.setOptions("addhspace=15 addvspace=15");
				
				Plot.setLimits(0,  xMax, 0, yMax);
				Plot.setLineWidth(2);
				Plot.add("error bars", FitnessErrorArray);
				Plot.show();



run("Select All");
run("Duplicate...", "title=CopyPlot");
run("Invert");
selectImage("CopyPlot");

run("Select All");
Roi.getBounds(x, y, width, height);

plotScale = 522/width;



ts = "x=- y=- width="+ width*plotScale + " height=" + height*plotScale  + "  interpolation=None";
ts2 = "width="+ width*plotScale + " height=" + height*plotScale + " position=Center";

run("Scale...", ts);
run("Canvas Size...", ts2);


//Array.show("check_old",GenArray, IDarray, FitnessArray);



// Get Luminance, Colour, Pattern, Gabrat
//--------------------------------------------

		combinedList =  getFileList(survivalDIR);

		Leng = lengthOf(survivalList);
		
		CombinedArray = newArray();

		for(i=0; i<Leng; i++) { 
			if(startsWith(survivalList[i], "Combined")==1){

					CombinedArray  = Array.concat(CombinedArray , survivalList[i]);
			}}

		
		
	
		LumArray2 = newArray();
		PatternArray2 = newArray();
		ColourArray2 = newArray();
		GabRatArray2 = newArray();
		
			
		bgLumArray2 = newArray();
		bgCtrstArray2 = newArray();
		bgAvalArray2 = newArray();
		bgBvalArray2 = newArray();
		
		targetLumArray2 = newArray();
		targetCtrstArray2 = newArray();
		targetAvalArray2 = newArray();
		targetBvalArray2 = newArray();
		
		
		
		Lum_MeanArray = newArray();
		Lum_ErrorArray = newArray();
		
		Pattern_MeanArray = newArray();
		Pattern_ErrorArray = newArray();
		
		Colour_MeanArray = newArray();
		Colour_ErrorArray = newArray();
		
		GabRat_MeanArray = newArray();
		GabRat_ErrorArray = newArray();
		
		imageNumArray=newArray();
		XcoordArray = newArray();
		YcoordArray = newArray();
		rotationArray = newArray();
		flipArray = newArray();
		
		IDarrayCheck = newArray();
 

		
		startTimeTest = getTime();
		TestTime= getTime()- startTimeTest;

		FolderName=File.getName(survivalDIR);
		
		
			oldestGen=-1;
			NewAnalysisGate = 1;
		
			if(File.exists(survivalDIR+"Data_Output.txt")){
			referenceString=File.openAsString(survivalDIR+"Data_Output.txt");	// open txt data file
			referenceRows=split(referenceString, "\n");
			referenceRows=Array.deleteIndex(referenceRows, 0);
			
			if(referenceRows.length>0){
			temp = split(referenceRows[referenceRows.length-1], "\t");
			oldestGen = temp[0];
			}
			
			if(referenceRows.length == (CombinedArray.length * PopSize)){
			NewAnalysisGate = 0;
			}
		
			}
			
			if(File.exists(survivalDIR+"Data_Output_" + FolderName + ".txt")){
			
			referenceString=File.openAsString(survivalDIR+"Data_Output_" + FolderName + ".txt");	// open txt data file
			
			referenceRows=split(referenceString, "\n");
			
			if(referenceRows.length>0){
			referenceRows=Array.deleteIndex(referenceRows, 0);
			
			if(referenceRows.length>0){
			temp = split(referenceRows[referenceRows.length-1], "\t");
			oldestGen = temp[0];
			}
			
			if(referenceRows.length == (CombinedArray.length * PopSize)){
			NewAnalysisGate = 0;
			}
			}
			}

						
			for (i=0; i<CombinedArray.length; i++){

			CombinedNum = survivalDIR + "Combined_GenPat_"+i+"/";
			
	
			luminanceDifference = newArray();
			patternDifference = newArray();
			colourDifference = newArray();
			GabRatArray = newArray();
			
			bgLum = newArray();
			bgCtrst= newArray();
			bgAv = newArray();
			bgBv = newArray();
			
			targetLum = newArray();
			targetCtrst= newArray();
			targetAv = newArray();
			targetBv = newArray();
			
			
			fileList = getFileList(CombinedNum);
			photoList = newArray();
			for(f=0; f<fileList.length; f++){
			if(endsWith(fileList[f], ".tif")){
			photoList=Array.concat(photoList,fileList[f]);
			}
			}
			
			
			
			if(i > oldestGen){
			
			CombinedNumAlt = survivalDIR + "Combined_GenPat_"+i+"/Records.txt";

			referenceString=File.openAsString(CombinedNumAlt);	// open txt data file
			referenceRows=split(referenceString, "\n");
			referenceRows=Array.deleteIndex(referenceRows, 0);
			
			for(Z=0; Z<referenceRows.length; Z++){
			
			temp=split(referenceRows[Z], "\t");
			
			IDarrayCheck = Array.concat(IDarrayCheck, temp[2]);
			imageNumArray = Array.concat(imageNumArray, temp[1]);
			XcoordArray = Array.concat(XcoordArray, parseFloat(temp[3]));
			YcoordArray = Array.concat(YcoordArray, parseFloat(temp[4]));
			rotationArray = Array.concat(rotationArray, parseFloat(temp[6]));
			flipArray = Array.concat(flipArray, temp[5]);
 
			}
			
			for(f=0; f<photoList.length; f++){

			
			
			
			open(CombinedNum + f + ".tif");
			rename("Analyse");
			
			
								//Get Measuements
								//-----------------------------
								run("To ROI Manager");
								run("Lab Stack");
								run("32-bit");

								run("Set Measurements...", "mean standard redirect=None decimal=9");
								run("Clear Results");

								roiManager("select", Array.getSequence( roiManager("count") ) );
								roiManager("multi-measure one");


								for(l=0; l<numPerSlide; l++) {



									//L mean difference
									//-----------------------
									targetColumn = "Mean(prey_"+ l +")";
									targetL = getResult(targetColumn , 0);

									localColumn = "Mean(local_"+ l +")";
									localL = getResult(localColumn, 0);

									Ldiff = Math.sqrt( Math.sqr(localL - targetL));

									luminanceDifference = Array.concat(luminanceDifference, Ldiff );

									
									bgLum = Array.concat(bgLum, localL );
									targetLum = Array.concat(targetLum, targetL );
												
												
									//Pattern difference
									//-----------------------
									targetColumn = "StdDev(prey_"+ l +")";
									targetP = getResult(targetColumn , 0);

									localColumn = "StdDev(local_"+ l +")";
									localP = getResult(localColumn, 0);

									Pdiff = Math.sqrt( Math.sqr(localP - targetP));

									patternDifference = Array.concat(patternDifference, Pdiff );
									
									bgCtrst = Array.concat(bgCtrst, localP);
									targetCtrst = Array.concat(targetCtrst, targetP );

									//Colour difference
									//-----------------------
									// A
									//-----
									targetColumn = "Mean(prey_"+ l +")";
									targetA = getResult(targetColumn , 1);

									localColumn = "Mean(local_"+ l +")";
									localA = getResult(localColumn, 1);

									Adiff = Math.sqr(localA - targetA);
									
									bgAv = Array.concat(bgAv , localA);
									targetAv = Array.concat(targetAv, targetA);									
									

									// B
									//-----
									targetColumn = "Mean(prey_"+ l +")";
									targetB = getResult(targetColumn , 2);

									localColumn = "Mean(local_"+ l +")";
									localB = getResult(localColumn, 2);

									Bdiff = Math.sqr(localB - targetB);

									Cdiff = Math.sqrt(Adiff + Bdiff);

									colourDifference = Array.concat(colourDifference, Cdiff );

									bgBv = Array.concat(bgBv , localB);
									targetBv = Array.concat(targetBv, targetB);	

								}

								

								//GABRAT
								//---------------------------
								function 	roiGetList(String1){


								roiList1 = newArray();
								roiLocs1 = newArray();
								roiFullList1 = newArray();
								nROIs1 = roiManager("count");

								for(j=0; j<nROIs1; j++){
									roiManager("Select", j);
									tStr = getInfo("selection.name");
									roiFullList1 = Array.concat(roiFullList1, tStr);
									if(startsWith(tStr, String1) == true){
										roiList1 = Array.concat(roiList1, tStr);
										roiLocs1= Array.concat(roiLocs1, j);
										}
									}

								return roiLocs1;

								}


								LOCALS = roiGetList("local");
								roiManager("select", LOCALS);
								roiManager("delete");



								run("Clear Results");
								run("Set Measurements...", "area mean min redirect=None decimal=9");
								angles = 4;
								sigma = 3.0;
								gamma = 1.0;
								freq = 2.0;


								for(j=0; j<roiManager("count"); j++){


								roiManager("Select", j);

								tStr = getInfo("selection.name");

								if(startsWith(tStr, "Scale Bar") == false){ // only measure ROIs which aren't scale bars
								tStr = getTitle + "_" + tStr;

										setSlice(1);
										tStr2 = tStr + "_" + getMetadata("Label");
										run("GabRat Disruption", "number_of_angles=&angles sigma=&sigma gamma=&gamma frequency=&freq label=&tStr2");
									
								}// scale bar
								}//j roi


								for(l=0; l<numPerSlide; l++) {
								Row = l;

								targetGAB = getResult("GabRat" , Row);

								GabRatArray = Array.concat(GabRatArray, parseFloat(targetGAB));
								}




								

			close("Analyse");
			}
			}

			
			if(i<=oldestGen){
			for(f=0; f<PopSize; f++){
			indexStr = (i*(PopSize))+f;
			temp = split(referenceRows[indexStr], "\t");
			
			
			luminanceDifference = Array.concat(luminanceDifference, parseFloat(temp[5]));
			patternDifference = Array.concat(patternDifference, parseFloat(temp[6]));
			colourDifference = Array.concat(colourDifference, parseFloat(temp[7]));
			
			bgLum = Array.concat(bgLum, parseFloat(temp[8]));
			bgCtrst = Array.concat(bgCtrst, parseFloat(temp[9]));
			bgAv = Array.concat(bgAv, parseFloat(temp[10]));
			bgBv = Array.concat(bgBv , parseFloat(temp[11]));
			
			targetLum = Array.concat(targetLum, parseFloat(temp[12]));
			targetCtrst = Array.concat(targetCtrst, parseFloat(temp[13]));
			targetAv = Array.concat(targetAv, parseFloat(temp[14]));
			targetBv = Array.concat(targetBv, parseFloat(temp[15]));
			
			GabRatArray = Array.concat(GabRatArray, parseFloat(temp[16]));
			imageNumArray = Array.concat(imageNumArray, temp[17]);
			XcoordArray = Array.concat(XcoordArray, parseFloat(temp[18]));
			YcoordArray = Array.concat(YcoordArray, parseFloat(temp[19]));
			rotationArray = Array.concat(rotationArray, parseFloat(temp[20]));
			flipArray = Array.concat(flipArray, temp[21]);
 
			}
			}
			
		
		
	
			
			LumArray2 = Array.concat(LumArray2, luminanceDifference);
			PatternArray2 = Array.concat(PatternArray2, patternDifference);
			ColourArray2 = Array.concat(ColourArray2, colourDifference);
			GabRatArray2 = Array.concat(GabRatArray2 , GabRatArray);

				bgLumArray2 = Array.concat(bgLumArray2, bgLum);
				bgCtrstArray2 = Array.concat(bgCtrstArray2 , bgCtrst);
				bgAvalArray2 = Array.concat(bgAvalArray2, bgAv);
				bgBvalArray2 = Array.concat(bgBvalArray2, bgBv);
		
				targetLumArray2 = Array.concat(targetLumArray2, targetLum);
				targetCtrstArray2 = Array.concat(targetCtrstArray2, targetCtrst);
				targetAvalArray2 = Array.concat(targetAvalArray2, targetAv);
				targetBvalArray2 = Array.concat(targetBvalArray2, targetBv);
					
		
			
			Array.getStatistics(luminanceDifference, min, max, mean, stdDev);
			Lum_MeanArray  = Array.concat(Lum_MeanArray , mean);
			Lum_ErrorArray =  Array.concat(	Lum_ErrorArray, stdDev/Math.sqrt(luminanceDifference.length));
			
			Array.getStatistics( patternDifference, min, max, mean, stdDev);
			Pattern_MeanArray  = Array.concat(Pattern_MeanArray , mean);
			Pattern_ErrorArray =  Array.concat(	Pattern_ErrorArray, stdDev/Math.sqrt(patternDifference.length));
			
			Array.getStatistics( colourDifference, min, max, mean, stdDev);
			Colour_MeanArray  = Array.concat(Colour_MeanArray , mean);
			Colour_ErrorArray =  Array.concat(	Colour_ErrorArray, stdDev/Math.sqrt(colourDifference.length));
			
			Array.getStatistics(GabRatArray, min, max, mean, stdDev);
			GabRat_MeanArray  = Array.concat(GabRat_MeanArray , mean);
			GabRat_ErrorArray =  Array.concat(	GabRat_ErrorArray, stdDev/Math.sqrt(GabRatArray.length));
			
			
			
			

			}

scaledLuminance = newArray();
scaledPattern = newArray();
scaledColour = newArray();
scaledGabRat = newArray();


Array.getStatistics(Lum_MeanArray, min, max, mean, stdDev);
for(i=0; i< Lum_MeanArray.length; i++){
scaledLuminance = Array.concat(scaledLuminance, (Lum_MeanArray[i]-mean)/stdDev);
}

Array.getStatistics(Pattern_MeanArray, min, max, mean, stdDev);
for(i=0; i< Pattern_MeanArray.length; i++){
scaledPattern = Array.concat(scaledPattern, (Pattern_MeanArray[i]-mean)/stdDev);
}

Array.getStatistics(Colour_MeanArray, min, max, mean, stdDev);
for(i=0; i< Colour_MeanArray.length; i++){
scaledColour = Array.concat(scaledColour, (Colour_MeanArray[i]-mean)/stdDev);
}

Array.getStatistics(GabRat_MeanArray, min, max, mean, stdDev);
for(i=0; i< GabRat_MeanArray.length; i++){
scaledGabRat = Array.concat(scaledGabRat, (GabRat_MeanArray[i]-mean)/stdDev);
}


			
//=================================================
//Create Plots
//=================================================


			//  Lum Plot
			// -----------------------	
			
				Array.getStatistics( shortGenArray, min, max, mean, stdDev);
				xMax = max+0.2;
				xMin = min;
				Array.getStatistics( Lum_MeanArray, min, max, mean, stdDev);
				yMax = max+stdDev;
				yMin = min-stdDev;
				if(yMin<0){
				yMin=0;
				}
			
				Plot.create("Line Plot", "Generation", "Luminance Difference", shortGenArray, Lum_MeanArray);
				Plot.setLineWidth(3);
				Plot.setFontSize(30);
				Plot.setAxisLabelSize(36, "bold");
				Plot.setOptions("addhspace=15 addvspace=15");
				
				Plot.setLimits(0,  xMax, yMin, yMax);
				Plot.setLineWidth(2);
				
				Plot.add("error bars", Lum_ErrorArray);
				
				Plot.show();
			

run("Select All");
run("Duplicate...", "title=LuminancePlot");
run("Invert");
selectImage("LuminancePlot");

run("Select All");
Roi.getBounds(x, y, width, height);

plotScale = 522/width;

ts = "x=- y=- width="+ width*plotScale + " height=" + height*plotScale  + "  interpolation=None";
ts2 = "width="+ width*plotScale + " height=" + height*plotScale + " position=Center";

run("Scale...", ts);
run("Canvas Size...", ts2);



			//  Pattern Plot
			// -----------------------	 
				Array.getStatistics( shortGenArray, min, max, mean, stdDev);
				xMax = max+0.2;
				xMin = min;
				Array.getStatistics( Pattern_MeanArray, min, max, mean, stdDev);
					
				yMax = max+stdDev;
				yMin = min-stdDev;
				if(yMin<0){
				yMin=0;
				}
				
				
			
				Plot.create("Line Plot", "Generation", "Contrast Difference", shortGenArray, Pattern_MeanArray);
				Plot.setLineWidth(3);
				Plot.setFontSize(30);
				Plot.setAxisLabelSize(36, "bold");
				Plot.setOptions("addhspace=15 addvspace=15");
				
				Plot.setLimits(0,  xMax, yMin, yMax);
				Plot.setLineWidth(2);
				
				Plot.add("error bars", Pattern_ErrorArray);
				
				Plot.show();
			

run("Select All");
run("Duplicate...", "title=PatternPlot");
run("Invert");
selectImage("PatternPlot");

run("Select All");
Roi.getBounds(x, y, width, height);

plotScale = 522/width;

ts = "x=- y=- width="+ width*plotScale + " height=" + height*plotScale  + "  interpolation=None";
ts2 = "width="+ width*plotScale + " height=" + height*plotScale + " position=Center";

run("Scale...", ts);
run("Canvas Size...", ts2);



			//  Colour Plot
			// -----------------------					 
				Array.getStatistics( shortGenArray, min, max, mean, stdDev);
				xMax = max+0.2;
				xMin = min;
				Array.getStatistics( Colour_MeanArray, min, max, mean, stdDev);
				yMax = max+stdDev;
				yMin = min-stdDev;
				if(yMin<0){
				yMin=0;
				}
				
				
			
				Plot.create("Line Plot", "Generation", "Colour Difference", shortGenArray, Colour_MeanArray);
				Plot.setLineWidth(3);
				Plot.setFontSize(30);
				Plot.setAxisLabelSize(36, "bold");
				Plot.setOptions("addhspace=15 addvspace=15");
				
				Plot.setLimits(0,  xMax, yMin, yMax);
				Plot.setLineWidth(2);
				
				Plot.add("error bars", Colour_ErrorArray);
				
				Plot.show();
			

run("Select All");
run("Duplicate...", "title=ColourPlot");
run("Invert");
selectImage("ColourPlot");

run("Select All");
Roi.getBounds(x, y, width, height);

plotScale = 522/width;

ts = "x=- y=- width="+ width*plotScale + " height=" + height*plotScale  + "  interpolation=None";
ts2 = "width="+ width*plotScale + " height=" + height*plotScale + " position=Center";

run("Scale...", ts);
run("Canvas Size...", ts2);


			//  GabRat Plot
			// -----------------------				
				 
				Array.getStatistics( shortGenArray, min, max, mean, stdDev);
				xMax = max+0.2;
				xMin = min;
				Array.getStatistics( GabRat_MeanArray, min, max, mean, stdDev);
				yMax = max+stdDev;
				yMin = min-stdDev;
				if(yMin<0){
				yMin=0;
				}
				
				
			
				Plot.create("Line Plot", "Generation", "GabRat", shortGenArray, GabRat_MeanArray);
				Plot.setLineWidth(3);
				Plot.setFontSize(30);
				Plot.setAxisLabelSize(36, "bold");
				Plot.setOptions("addhspace=15 addvspace=15");
				
				Plot.setLimits(0,  xMax, yMin, yMax);
				Plot.setLineWidth(2);
				
				Plot.add("error bars", GabRat_ErrorArray);
				
				Plot.show();
			

run("Select All");
run("Duplicate...", "title=GabRatPlot");
run("Invert");
selectImage("GabRatPlot");

run("Select All");
Roi.getBounds(x, y, width, height);

plotScale = 522/width;

ts = "x=- y=- width="+ width*plotScale + " height=" + height*plotScale  + "  interpolation=None";
ts2 = "width="+ width*plotScale + " height=" + height*plotScale + " position=Center";

plotHeight = 600;
plotWidth = 600;

run("Scale...", ts);
run("Canvas Size...", ts2);




//=================================================
//Get Top 9 Target Pictures
//=================================================


GenNum = survivalDIR + "generation_" + (survivalArray.length-1) +"_survival"  + txt;

GenName = "generation_" + (survivalArray.length-1);

PhenotypePath =  survivalDIR+"GenPat_"+ (survivalArray.length-1) +"/";



				referenceString=File.openAsString(GenNum);	// open txt data file
				referenceRows=split(referenceString, "\n");

				IDarray2 =newArray();
				FitnessArray2 =newArray();

				for(j=1;j<referenceRows.length;j++){
				tempArray = split(referenceRows[j], "\t");
				IDarray2=Array.concat(IDarray2, tempArray [0]);
				FitnessArray2=Array.concat(FitnessArray2, parseFloat( tempArray [1] ));
				}



				FitnessRanked = Array.rankPositions(FitnessArray2);

				photoIndex=Array.getSequence(FitnessRanked.length);

				IDRankedarray = newArray();

				IDSort=Array.copy(IDarray2);

				for(j=0;j<FitnessRanked.length;j++){

				str = FitnessRanked[FitnessRanked.length-1-j];
				IDRankedarray = Array.concat(IDRankedarray,IDarray2[str]);

				}


for(i=0; i<3; i++){
				
for(j=0; j<3; j++){


IDnam = IDRankedarray[(i*3)+j];

open(PhenotypePath+IDnam+".tif");
wait(10);
selectImage(IDnam+".tif");
run("Select All");
run("Size...", "width=157 height=157 depth=1 constrain average interpolation=Bilinear");
run("Select All");
run("Copy");
close(IDnam+".tif");

selectImage("EndScreen");
slide=3;

setSlice(slide);

makeRectangle( 817  + (177*j) + (xButtonShift/2), 300 + (186*i), 157,157);
setPasteMode("Transparent-zero");
run("Paste");
run("Select None");

setJustification("center");
setColor("white");
setFont("SansSerif",18);

Rank = "Rank " + j+1 + (i*3);

drawString(Rank , 817 + (177*j)+(177/2) + (xButtonShift/2), (300 + (186*i))+ 186);


}
}			

//Array.show(IDarrayCheck, IDarray, genomeArray);


//=================================================
//Save Data
//=================================================


			
dataFile = File.open(survivalDIR+"Data_Output_" + FolderName + ".txt");  

printArray = Array.concat("Generation", "ID", "Survival_Time", "Response_Time", "Capture_Time", "Luminance_Difference", "Contrast_Difference", "Colour_Difference", "GabRat_Edge_Disruption","BgLocal_Luminance", "BgLocal_Contrast", "BgLocal_A", "BgLocal_B", "Target_Luminance", "Target_Contrast", "Target_A", "Target_B",  "Image_ID", "X_Coordinate", "Y_Coordinate", "Rotation", "Flip");

printString = String.join(printArray, "\t");

printString= printString + "\t" + GenomeNames;

print(dataFile, printString);


for(i=0; i< GenArray.length;i++){

printArray = Array.concat(GenArray[i], IDarray[i], FitnessArray[i], ResponseArray[i], CaptureArray[i], LumArray2[i], PatternArray2[i], ColourArray2[i], GabRatArray2[i],bgLumArray2[i],bgCtrstArray2[i],bgAvalArray2[i],bgBvalArray2[i],targetLumArray2[i],targetCtrstArray2[i],targetAvalArray2[i],targetBvalArray2[i], imageNumArray[i], XcoordArray[i], YcoordArray[i], rotationArray[i], flipArray[i] );

printString = String.join(printArray, "\t") + "\t" + genomeArray[i];

print(dataFile, printString);
	
}

File.close(dataFile);




//=================================================
//Get First and Last Genome for Distribution Plot
//=================================================

genFirst=File.openAsString( survivalDIR  + "generation_0" + txt);
genFirstRows = split(genFirst, "\n");

genLast =File.openAsString( survivalDIR + "generation_" + (survivalArray.length-1)  + txt);
genLastRows = split(genLast, "\n");

GeneTitleList = split(genFirstRows[0], "\t");
GeneChoiceList = Array.slice(GeneTitleList, 1, GeneTitleList.length-2);


//=================================================
//Display Averages
//=================================================


// Give Average times
//------------------------------
selectImage("EndScreen");
setColor("white");
setFont("Caldibri ", 30);
setJustification("left");

 stringT= "Average Times:";
 drawString(stringT, 195 + (xButtonShift/2), 340);
 
 
 setFont("Caldibri ", 24);

 stringT= "Generation 0 = " + toString( (FitnessMeanArray[0]/1000), 2)+ " seconds";
 drawString(stringT, 195 + (xButtonShift/2), 390);
 
 stringT= "Generation "+ FitnessMeanArray.length-1 +" = " + toString((FitnessMeanArray[FitnessMeanArray.length-1]/1000), 2)+ " seconds";
 drawString(stringT, 195 + (xButtonShift/2), 430);

selectImage("CopyPlot");
run("Select All");
Roi.getBounds(x, y, plotWidth, plotHeight);
run("Copy");
setPasteMode("transparent-zero");


selectImage("EndScreen");
setSlice(3);
makeRectangle(134 + (xButtonShift/2),454,plotWidth, plotHeight);
run("Paste");
run("Select None");


setSlice(4);


// Give Average Camo Stats
//------------------------------
open(getDirectory("plugins") + "1 CamoEvo/Interface/buttonCover.jpg");
selectImage("EndScreen");
setSlice(4);

overlayPasteX = 170 + (xButtonShift/2);

run("Add Image...", "image=buttonCover.jpg x=overlayPasteX  y=300 opacity=60");

run("Add Image...", "image=buttonCover.jpg x=overlayPasteX y=420 opacity=60");

run("Add Image...", "image=buttonCover.jpg x=overlayPasteX y=550 opacity=60");

run("Add Image...", "image=buttonCover.jpg x=overlayPasteX y=680 opacity=60");

Overlay.moveSelection(0, 170 + xButtonShift/2, -300);
Overlay.moveSelection(1, 170 + xButtonShift/2, 420);
Overlay.moveSelection(2, 170 + xButtonShift/2, 550);
Overlay.moveSelection(3, 170 + xButtonShift/2, 680);

setColor("#16150D");
fillRect(792 + (xButtonShift/2), 248, 562, 574);

setColor("white");

setFont("Caldibri ", 30);

stringT= "Luminance Match:";
 drawString(stringT, 830 + (xButtonShift/2), 290);
 
				  if( startsWith(getInfo("os.name"), "Windows") ==1){
  					setFont("Caldibri ", 22, "bold");
							} else {
  					setFont("Caldibri ", 18, "bold");
					}	
					
		  stringT= "Difference of Mean Luminance.";
		
		 drawString(stringT, 830 + (xButtonShift/2) , 330);
		 
		   stringT= "As this difference 'decreases' camouflage improves.";
		
		 drawString(stringT,  830 + (xButtonShift/2) ,370);
		 
			stringT= "Generation 0 mean = " + toString (Lum_MeanArray[0]);
		 
		 drawString(stringT, 830 + (xButtonShift/2) , 410);
		 
			 stringT= "Generation "+ FitnessMeanArray.length-1 +" mean = " + toString(Lum_MeanArray[FitnessMeanArray.length-1]);
		 
		 drawString(stringT, 830 + (xButtonShift/2) , 450);
				
				selectImage("LuminancePlot");
				run("Select All");
				Roi.getBounds(x, y, plotWidth, plotHeight);
				run("Copy");
				setPasteMode("transparent-zero");


				selectImage("EndScreen");
				setSlice(4);
				makeRectangle(800 + (xButtonShift/2),474,plotWidth, plotHeight);
				run("Paste");
				run("Select None");
				setColor("White");

setSlice(4);

//----------------------------------------------------------------------------------------------------------------
// 3) Show Analysis Menu
//----------------------------------------------------------------------------------------------------------------

//=================================================
//Close Unnecessary Slides
//=================================================


selectImage("EndScreen");
slide=2;
setSlice(slide);


if(isOpen("Evolving")){
close("Evolving");
}

if(isOpen("Analysing")){
close("Analysing");
}



//=================================================
//Show the end screen
//=================================================

previewGate = 0;
downloadGate = 0;
endGate = 0;

run("Canvas Size...", "width=&fullWidth height=&fullHeight  position=Center");
setBatchMode("Show");
setLocation(interfaceX, interfaceY, interfaceW, interfaceH);


while(endGate==0){

slide=2;

setSlice(slide);

previewGate = 0;

//BUTTON 1, Preview Results
//-----------------------------------------


	b1_x1= 386 + (xButtonShift/2);
	b1_y1= 478;

	b1_x2= b1_x1 + 694;
	b1_y2= b1_y1 + 156;
	
	
//BUTTON 2, Download Results
//-----------------------------------------


	b2_x1= 386 + (xButtonShift/2);
	b2_y1= 688;

	b2_x2= b2_x1 + 694;
	b2_y2= b2_y1 + 156;
	
	
//BUTTON 3, Exit
//-----------------------------------------


	b3_x1= 386 + (xButtonShift/2);
	b3_y1= 896;

	b3_x2= b3_x1 + 694;
	b3_y2= b3_y1 + 156;



	
	
if(getSliceNumber()==2){
wait(200);

	flag=0;
	getCursorLoc(mouseX, mouseY, mouseZ, flag); Tool=0;

		clickX=mouseX; 
		clickY=mouseY;

		//Button 1
		//-----------------
		if( clickX > b1_x1   &&    clickX < b1_x2   &&   clickY > b1_y1 &&  clickY < b1_y2) {
		Tool=1; 
		  if(flag&16!=0){

		previewGate = 1;
		setSlice(3);
		slide=3;
		}
		}
		
		//Button 2
		//-----------------
		if( clickX > b2_x1   &&    clickX < b2_x2   &&   clickY > b2_y1 &&  clickY < b2_y2) {
		
		Tool=1; 
		  if(flag&16!=0){

		downloadGate = 1;
		
		datafileDIR = getDirectory("Select the Folder you wish to download your results to.");
		
		if(File.exists(survivalDIR + "Data_Output.txt")){
		File.copy(survivalDIR + "Data_Output.txt", datafileDIR + "Data_Output.txt");
		}
		
		if(File.exists(survivalDIR+"Data_Output_" + FolderName + ".txt")){
		File.copy(survivalDIR+"Data_Output_" + FolderName + ".txt", datafileDIR + "Data_Output_" + FolderName + ".txt");
		}
		
		wait (200);
		}
		}
		
		
		//Button 3
		//-----------------
		if( clickX > b3_x1   &&    clickX < b3_x2   &&   clickY > b3_y1 &&  clickY < b3_y2) {
		Tool=1; 
		  if(flag&16!=0){

		endGate = 1;
		
		wait (200);
		}
		}
		

		run("Select None");
		if(Tool != ToolOld){
			if(Tool == 0)
				setTool("arrow");
			if(Tool  == 1)
				setTool("hand");
		ToolOld= Tool;
		}

		}


// Present the Preview Screen
//---------------------------------------

if(previewGate == 1) {
wait(300);

				//BUTTON 1, Right Arrow
				//-----------------------------------------


					b1_x1= 1013  + (xButtonShift/2);
					b1_y1= 898;

					b1_x2= b1_x1 + 205;
					b1_y2= b1_y1 + 160;
					
					
				//BUTTON 2, Left Arrow
				//-----------------------------------------


					b2_x1= 260 + (xButtonShift/2);
					b2_y1= 898;

					b2_x2= b2_x1 + 205;
					b2_y2= b2_y1 + 160;
					
					
					
				//BUTTON 3, Luminance
				//-----------------------------------------


					b3_x1= 182 + (xButtonShift/2);
					b3_y1= 310;

					b3_x2= b3_x1 + 448;
					b3_y2= b3_y1 + 96;
					
					
				//BUTTON 4, Pattern
				//-----------------------------------------


					b4_x1= 182 + (xButtonShift/2);
					b4_y1= 440;

					b4_x2= b4_x1 + 448;
					b4_y2= b4_y1 + 96;
					
					
				//BUTTON 5, Colour
				//-----------------------------------------


					b5_x1= 182 + (xButtonShift/2);
					b5_y1= 580;

					b5_x2= b5_x1 + 448;
					b5_y2= b5_y1 + 96;
					
				//BUTTON 6, Disruption
				//-----------------------------------------


					b6_x1= 182 + (xButtonShift/2);
					b6_y1= 698;

					b6_x2= b6_x1 + 448;
					b6_y2= b6_y1 + 96;
				
				
				//BUTTON 7, Gene Choice
				//-----------------------------------------


					b7_x1= 534 + (xButtonShift/2);
					b7_y1= 769;

					b7_x2= b7_x1 + 409;
					b7_y2= b7_y1 + 159;
					
				
				
				
	whileGate=0;

	run("Select None");
				
	slide = 3;

	while(whileGate==0){

	wait(100);

	selectImage("EndScreen");
					

	
	setSlice(slide);
	getCursorLoc(mouseX, mouseY, mouseZ, flag); Tool=0;
	
		{

		flag=0;
		getCursorLoc(mouseX, mouseY, mouseZ, flag); Tool=0;
		clickX=mouseX; 
		clickY=mouseY;

						//Button 1
						//-----------------
						if( clickX > b1_x1   &&    clickX < b1_x2   &&   clickY > b1_y1 &&  clickY < b1_y2) {

						Tool=1;
						if(flag&16!=0){wait (200);
						
						if(slide==5){
						whileGate=1;
						}
						
						if(slide==4){
						slide=5;
						}
						
						if(slide==3){
						slide=4;
						}
						

						}
						}
						
						//Button 2
						//-----------------
						if( clickX > b2_x1   &&    clickX < b2_x2   &&   clickY > b2_y1 &&  clickY < b2_y2) {

						Tool=1;   
						if(flag&16!=0){wait (200);

						
						if(slide==3){
						whileGate=1;
						}
						
						if(slide==4){
						slide=3;
						}
						
						if(slide==5){
						slide=4;
						}




						}
						}
						
						//Button 3
						//-----------------
						if( clickX > b3_x1   &&    clickX < b3_x2   &&   clickY > b3_y1 &&  clickY < b3_y2) {

						if(slide==4){
						Tool=1;   
						if(flag&16!=0){wait (200);
						
						Overlay.moveSelection(0, 170 + xButtonShift/2, -300);
						Overlay.moveSelection(1, 170 + xButtonShift/2, 420);
						Overlay.moveSelection(2, 170 + xButtonShift/2, 550);
						Overlay.moveSelection(3, 170 + xButtonShift/2, 680);

									setJustification("centre");
									setColor("#16150D");
									fillRect(792 + (xButtonShift/2), 248, 562, 574);

									setColor("white");
									setFont("Caldibri ", 30);
									stringT= "Luminance Match:";
									
										
									 drawString(stringT, 830 + (xButtonShift/2), 290, "#16150D");
									 
									  if( startsWith(getInfo("os.name"), "Windows") ==1){
										setFont("Caldibri ", 22, "bold");
												} else {
										setFont("Caldibri ", 18, "bold");
										}	

											  stringT= "Difference in Mean Luminance.";

											 drawString(stringT, 830  + (xButtonShift/2), 330, "#16150D");
											 
											   stringT= "As difference 'decreases' camouflage improves.";

											 drawString(stringT,  830 + (xButtonShift/2),370, "#16150D");
											 
												stringT= "Generation 0 mean = " + toString (Lum_MeanArray[0]);

											 drawString(stringT, 830 + (xButtonShift/2), 410, "#16150D");
											 
												 stringT= "Generation "+ FitnessMeanArray.length-1 +" mean = " + toString(Lum_MeanArray[FitnessMeanArray.length-1]);

											 drawString(stringT, 830 + (xButtonShift/2), 450, "#16150D");


									selectImage("LuminancePlot");
									run("Select All");
									Roi.getBounds(x, y, plotWidth, plotHeight);
									run("Copy");
									setPasteMode("transparent-zero");


									selectImage("EndScreen");
									setSlice(4);
									makeRectangle(800 + (xButtonShift/2),474,plotWidth, plotHeight);
									run("Paste");
									run("Select None");
									setColor("White");
				
				
				
								
						}

						}
						}
						
					
							//Button 4
						//-----------------
						if( clickX > b4_x1   &&    clickX < b4_x2   &&   clickY > b4_y1 &&  clickY < b4_y2) {

						
						if(slide==4){

						Tool=1;   
						if(flag&16!=0){wait (200);
						
						Overlay.moveSelection(0, 170 + xButtonShift/2, 300);
						Overlay.moveSelection(1, 170 + xButtonShift/2, -420);
						Overlay.moveSelection(2, 170 + xButtonShift/2, 550);
						Overlay.moveSelection(3, 170 + xButtonShift/2, 680);
						
									setJustification("centre");
									setColor("#16150D");
									fillRect(792 + (xButtonShift/2), 248, 562, 574);

									setColor("white");
									
											
									stringT= "Contrast Match:";
											 
										setFont("Caldibri ", 30);
									 drawString(stringT, 830 + (xButtonShift/2), 290);
									 
									  if( startsWith(getInfo("os.name"), "Windows") ==1){
										setFont("Caldibri ", 22, "bold");
												} else {
										setFont("Caldibri ", 18, "bold");
										}	


											  stringT= "Difference in Luminance StDev.";
											
											 drawString(stringT, 830 + (xButtonShift/2), 330);
											 
											   stringT= "As difference 'decreases' camouflage improves.";

											 drawString(stringT,  830 + (xButtonShift/2),370);
											 
												stringT= "Generation 0 mean = " + toString (Pattern_MeanArray[0]);

											 drawString(stringT, 830 + (xButtonShift/2), 410);
											 
												 stringT= "Generation "+ FitnessMeanArray.length-1 +" mean = " + toString(Pattern_MeanArray[FitnessMeanArray.length-1]);

											 drawString(stringT, 830 + (xButtonShift/2), 450);


									selectImage("PatternPlot");
									run("Select All");
									Roi.getBounds(x, y, plotWidth, plotHeight);
									run("Copy");
									setPasteMode("transparent-zero");


									selectImage("EndScreen");
									setSlice(4);
									makeRectangle(800 + (xButtonShift/2),474,plotWidth, plotHeight);
									run("Paste");
									run("Select None");
									setColor("White");
													
											}

											}
											}
						
						
								//Button 5
						//-----------------
						if( clickX > b5_x1   &&    clickX < b5_x2   &&   clickY > b5_y1 &&  clickY < b5_y2) {


						if(slide==4){
						Tool=1;   
						if(flag&16!=0){wait (200);
						
						
						Overlay.moveSelection(0, 170 + xButtonShift/2, 300);
						Overlay.moveSelection(1, 170 + xButtonShift/2, 420);
						Overlay.moveSelection(2, 170 + xButtonShift/2, -550);
						Overlay.moveSelection(3, 170 + xButtonShift/2, 680);						
						
									setJustification("centre");
									setColor("#16150D");
									fillRect(792 + (xButtonShift/2), 248, 562, 574);

									setColor("white");
									
											stringT= "Colour Match:";
											 
										setFont("Caldibri ", 30);

									 drawString(stringT, 830 + (xButtonShift/2), 290);
									 
									  if( startsWith(getInfo("os.name"), "Windows") ==1){
										setFont("Caldibri ", 22, "bold");
												} else {
										setFont("Caldibri ", 18, "bold");
										}	


											  stringT= "Difference of Mean Colour.";
										
											 drawString(stringT, 830 + (xButtonShift/2), 330);
											 
											   stringT= "As difference 'decreases' camouflage improves.";
										
											 drawString(stringT,  830 + (xButtonShift/2),370);
											 
												stringT= "Generation 0 mean = " + toString (Colour_MeanArray[0]);
										
											 drawString(stringT, 830 + (xButtonShift/2), 410);
											 
												 stringT= "Generation "+ FitnessMeanArray.length-1 +" mean = " + toString(Colour_MeanArray[FitnessMeanArray.length-1]);
										
											 drawString(stringT, 830 + (xButtonShift/2), 450);

									
									selectImage("ColourPlot");
									run("Select All");
									Roi.getBounds(x, y, plotWidth, plotHeight);
									run("Copy");
									setPasteMode("transparent-zero");


									selectImage("EndScreen");
									setSlice(4);
									makeRectangle(800 + (xButtonShift/2),474,plotWidth, plotHeight);
									run("Paste");
									run("Select None");
									setColor("White");				
											}

											}
											}	


								//Button 6
						//-----------------
						if( clickX > b6_x1   &&    clickX < b6_x2   &&   clickY > b6_y1 &&  clickY < b6_y2) {

					
						if(slide==4){
						Tool=1;   
						if(flag&16!=0){wait (200);				
						
						Overlay.moveSelection(0, 170 + xButtonShift/2, 300);
						Overlay.moveSelection(1, 170 + xButtonShift/2, 420);
						Overlay.moveSelection(2, 170 + xButtonShift/2, 550);
						Overlay.moveSelection(3, 170 + xButtonShift/2, -680);

						
							setJustification("centre");
							setColor("#16150D");
							fillRect(792 + (xButtonShift/2), 248, 562, 574);

							setColor("white");
										
									stringT= "Edge Disruption:";
									 
								setFont("Caldibri ", 30);
							 drawString(stringT, 830 + (xButtonShift/2), 290);
							 
							  if( startsWith(getInfo("os.name"), "Windows") ==1){
								setFont("Caldibri ", 22, "bold");
										} else {
								setFont("Caldibri ", 18, "bold");
								}	

									  stringT= "Level of GabRat.";
									
									 drawString(stringT, 830 + (xButtonShift/2), 330);
									 
									   stringT= "As GabRat 'increases' camouflage improves.";
							
									 drawString(stringT,  830 + (xButtonShift/2),370);
									 
										stringT= "Generation 0 mean = " + toString (GabRat_MeanArray[0]);
							
									 drawString(stringT, 830 + (xButtonShift/2), 410);
									 
										 stringT= "Generation "+ FitnessMeanArray.length-1 +" mean = " + toString(GabRat_MeanArray[FitnessMeanArray.length-1]);
									
									 drawString(stringT, 830 + (xButtonShift/2), 450);


						
							selectImage("GabRatPlot");
							run("Select All");
							Roi.getBounds(x, y, plotWidth, plotHeight);
							run("Copy");
							setPasteMode("transparent-zero");


							selectImage("EndScreen");
							setSlice(4);
							makeRectangle(800 + (xButtonShift/2),474,plotWidth, plotHeight);
							run("Paste");
							run("Select None");
							setColor("White");
											
									}

									}	
									}
									
									
								//Button 7
						//-----------------
						if( clickX > b7_x1   &&    clickX < b7_x2   &&   clickY > b7_y1 &&  clickY < b7_y2) {

					
						if(slide==5){
						Tool=1;   
						if(flag&16!=0){wait (200);	
									

									Dialog.createNonBlocking("Get Gene");
									Dialog.addChoice("Choose a Gene", GeneChoiceList,0);
									Dialog.show();

									GeneChoice = Dialog.getChoice();
									GeneIndex = index(GeneTitleList, GeneChoice);

									firstGeneValues = newArray(genFirstRows.length-1);
									lastGeneValues = newArray(genFirstRows.length-1);

									for(i=0; i<firstGeneValues.length; i++ ) {

									tempArray1  = split(genFirstRows[i+1], "\t");
									firstGeneValues[i] =   parseFloat(tempArray1[GeneIndex]) ;

									tempArray2  = split(genLastRows[i+1], "\t");
									lastGeneValues[i] =  parseFloat(tempArray2[GeneIndex]) ;
									
									}


									yArray = newArray(firstGeneValues.length);

									if(isOpen("Gen_0")){
									close("Gen_0");
									}

									if(isOpen("Gen_15")){
									close("Gen_15");
									}


									Array.getStatistics( firstGeneValues, min, max, firstMean, firstStdDev);
									Array.getStatistics( lastGeneValues, min, max, lastMean,lastStdDev);
									
									
									if(isNaN(firstStdDev)){
									firstStdDev = 0;
									}
									if(isNaN(lastStdDev)){
									lastStdDev = 0;
									}

									if(isOpen("GenePlots")){
									close("GenePlots");
									}


									selectImage("EndScreen");

									setColor("#16150D");
									fillRect(226 + (xButtonShift/2), 318, 1020, 406);
									setColor("white");

									// =================================================
									// Create new Plot Image
									// =================================================


									//makeRectangle(578, 320,  680, 400);

									plotWidth = 800;
									plotHeight = 400;

									newImage("GenePlots", "RGB black", plotWidth, plotHeight, 1);
									selectImage("GenePlots");
						


									ovalW = 10;
									ovalH =60;
									lineW = plotWidth*5/6;
									setLineWidth(2);
									
									
									//-------------------------
									// Generation First
									//-------------------------

									rtX = (plotWidth-(lineW))/2;
									rtY = (plotHeight*0.25)+20;

									setColor("white");
									fillRect(rtX, rtY,(lineW), 2);

									setJustification("center");
									setColor("white");
									setFont("Caldibri ", 26);
									stringT= "Generation 0";
									drawString(stringT, plotWidth/2, rtY+ovalH+30);

									setFont("Caldibri ", 18);
									stringT= "0.0";
									drawString(stringT, rtX+2, rtY+ovalH+10);

									setFont("Caldibri ", 18);
									stringT= "1.0";
									drawString(stringT, rtX+(lineW)-2, rtY+ovalH+10);

									setColor("gray");
									for(i =0; i<firstGeneValues.length; i++){
									xCoord = rtX + (firstGeneValues[i]*((lineW)-ovalW));
									rand = random("gaussian");
									makeOval(xCoord+rand, rtY-(ovalH)/2, ovalW, ovalH);
									run("Add...", "value=80");
									drawOval(xCoord+rand, rtY-(ovalH)/2, ovalW, ovalH);
									}



									//-------------------------
									// Generation Last
									//-------------------------

									rtX = (plotWidth-(lineW))/2;
									rtY = rtY+165;

									setColor("white");
									fillRect(rtX, rtY,(lineW), 2);

									setJustification("center");
									setColor("white");
									setFont("Caldibri ", 26);
									stringT= "Generation " + (survivalArray.length-1);
									drawString(stringT, plotWidth/2, rtY+ovalH+30);

									setFont("Caldibri ", 18);
									stringT= "0.0";
									drawString(stringT, rtX+2, rtY+ovalH+10);

									setFont("Caldibri ", 18);
									stringT= "1.0";
									drawString(stringT, rtX+(lineW)-2, rtY+ovalH+10);

									setColor("gray");
									for(i =0; i<lastGeneValues.length; i++){
									xCoord = rtX + (lastGeneValues[i]*((lineW)-ovalW));
									rand = random("gaussian");
									makeOval(xCoord+rand, rtY-(ovalH)/2, ovalW, ovalH);
									run("Add...", "value=80");
									drawOval(xCoord+rand, rtY-(ovalH)/2, ovalW, ovalH);
									}


									run("Select All");
									run("Copy");

									pasteX = 448 + (xButtonShift/2);
									pasteY = 320;

									selectImage("EndScreen");
									makeRectangle(pasteX, pasteY, plotWidth, plotHeight);
									setPasteMode("Transparent-zero");
									run("Paste");
									run("Select None");
									
									close("GenePlots");

									setJustification("center");
									setColor("#66D122");
									setFont("Caldibri ", 30);
									stringT= GeneChoice;
									drawString(stringT, pasteX+(plotWidth/2), 360);




									setJustification("right");
									setColor("white");
									setFont("Caldibri ", 24);
									stringT= "Mean = " + d2s(firstMean,3);
									drawString(stringT,pasteX, 430);

									stringT= "StDv = " +d2s(firstStdDev,3);
									drawString(stringT, pasteX, 430+60);

									stringT= "Mean = " + d2s(lastMean,3);
									drawString(stringT,pasteX, 590);

									stringT= "StDv = " + d2s(lastStdDev,3);
									drawString(stringT, pasteX, 590+60);




						
									
									
						}			
									
									
									
						}		
									
						}
									

						

				run("Select None");
				if(Tool != ToolOld){
			if(Tool == 0)
				setTool("arrow");
			if(Tool  == 1)
				setTool("hand");
		ToolOld= Tool;
}

				}


				}

				}
				


}

if(endGate == 1){


if(downloadGate==1){

if(isOpen("Loading")){
selectImage("Loading");

setBatchMode("Show");
run("Maximize");
setLocation(interfaceX, interfaceY, interfaceW, interfaceH);
 run("Animation Options...", "speed="+6);
doCommand("Start Animation");
setBatchMode(false);
close("\\Others");
} else{
close("*");
}
doCommand("CamoEvo Game");
exit

} else {

slide=6;

setSlice(slide);


//BUTTON 1, Exit and Save
//-----------------------------------------


	b1_x1= 440  + (xButtonShift/2);
	b1_y1= 576;

	b1_x2= b1_x1 + 598;
	b1_y2= b1_y1 + 164;
	
	
//BUTTON 2, Exit
//-----------------------------------------


	b2_x1= 440 + (xButtonShift/2);
	b2_y1= 820;

	b2_x2= b2_x1 + 598;
	b2_y2= b2_y1 + 164;


whileGate=0;

while(whileGate==0){


	
	setSlice(slide);
	getCursorLoc(mouseX, mouseY, mouseZ, flag); Tool=0;
	
	
		{
		
		


		clickX=mouseX; 
		clickY=mouseY;

		//Button 1
		//-----------------
		if( clickX > b1_x1   &&    clickX < b1_x2   &&   clickY > b1_y1 &&  clickY < b1_y2) {
		
		
	
		Tool=1;
		Tool=1;   if(flag&16!=0){wait (200);
		whileGate=1;
		
		datafileDIR = getDirectory("Select the Folder you wish to download your results to.");
		
		if(File.exists(survivalDIR + "Data_Output.txt")){
		File.copy(survivalDIR + "Data_Output.txt", datafileDIR + "Data_Output.txt");
		}
		
		if(File.exists(survivalDIR+"Data_Output_" + FolderName + ".txt")){
		File.copy(survivalDIR+"Data_Output_" + FolderName + ".txt", datafileDIR + "Data_Output_" + FolderName + ".txt");
		}

		}
		}
		
		//Button 2
		//-----------------
		if( clickX > b2_x1   &&    clickX < b2_x2   &&   clickY > b2_y1 &&  clickY < b2_y2) {
		
		Tool=1;
		Tool=1;   if(flag&16!=0){wait (200);
		whileGate=1;

		}
		}
		
	run("Select None");
	if(Tool != ToolOld){
			if(Tool == 0)
				setTool("arrow");
			if(Tool  == 1)
				setTool("hand");
		ToolOld= Tool;
}

		}



}


}

if(isOpen("Loading")){
selectImage("Loading");


setBatchMode("Show");
run("Maximize");
setLocation(interfaceX, interfaceY, interfaceW, interfaceH);
 run("Animation Options...", "speed="+6);
doCommand("Start Animation");
setBatchMode(false);
close("\\Others");
} else{
close("*");
}
doCommand("CamoEvo Game");
exit


}

}



}
//print("loop");
}

